import React, { useState } from "react";
import { AdminLayout } from "@/components/AdminLayout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Settings,
  Brain,
  MessageSquare,
  FileText,
  Plus,
  Save,
  Download,
  Edit,
  Trash2,
  MoreHorizontal,
  Eye,
  EyeOff,
  Cpu,
  Activity,
} from "lucide-react";

// Mock data
const mockPrompts = [
  {
    id: 1,
    name: "Prompt t·∫°o b√†i t·∫≠p to√°n",
    content: "H√£y t·∫°o m·ªôt b√†i t·∫≠p to√°n h·ªçc ph√π h·ª£p v·ªõi h·ªçc sinh l·ªõp {grade} v·ªÅ ch·ªß ƒë·ªÅ {topic}. B√†i t·∫≠p c·∫ßn c√≥ {difficulty} ƒë·ªô kh√≥ v√† bao g·ªìm {questions} c√¢u h·ªèi.",
    module: "B√†i t·∫≠p",
    createdAt: "2024-01-15",
  },
  {
    id: 2,
    name: "Prompt sinh l·ªô tr√¨nh h·ªçc",
    content: "D·ª±a tr√™n m·ª•c ti√™u h·ªçc t·∫≠p '{goal}' trong th·ªùi gian {duration}, h√£y t·∫°o m·ªôt l·ªô tr√¨nh h·ªçc chi ti·∫øt cho h·ªçc sinh c√≥ tr√¨nh ƒë·ªô {level}.",
    module: "L·ªô tr√¨nh",
    createdAt: "2024-01-20",
  },
  {
    id: 3,
    name: "Prompt chatbot h·ªó tr·ª£",
    content: "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán gi√∫p h·ªçc sinh ti·ªÉu h·ªçc. H√£y tr·∫£ l·ªùi c√¢u h·ªèi '{question}' m·ªôt c√°ch ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu v√† khuy·∫øn kh√≠ch.",
    module: "Chatbot",
    createdAt: "2024-01-10",
  },
];

const mockAILogs = [
  {
    id: 1,
    timestamp: "2024-01-28 14:30:25",
    user: "Nguy·ªÖn Minh ƒê·ª©c",
    module: "B√†i t·∫≠p",
    tokensUsed: 150,
    status: "Th√†nh c√¥ng",
    cost: "0.003$",
  },
  {
    id: 2,
    timestamp: "2024-01-28 14:25:12",
    user: "Tr·∫ßn Th·ªã Mai",
    module: "Chatbot",
    tokensUsed: 85,
    status: "Th√†nh c√¥ng",
    cost: "0.002$",
  },
  {
    id: 3,
    timestamp: "2024-01-28 14:20:45",
    user: "Admin AI",
    module: "L·ªô tr√¨nh",
    tokensUsed: 320,
    status: "L·ªói",
    cost: "0.000$",
  },
];

export default function AdminAIConfig() {
  const [apiConfig, setApiConfig] = useState({
    apiKey: "sk-************************************",
    model: "gpt-4",
    temperature: [0.7],
    maxTokens: 1000,
  });

  const [aiFeatures, setAiFeatures] = useState({
    autoGrading: true,
    pathGeneration: true,
    exerciseCreation: false,
    progressReporting: true,
  });

  const [prompts, setPrompts] = useState(mockPrompts);
  const [isAddPromptDialogOpen, setIsAddPromptDialogOpen] = useState(false);
  const [showApiKey, setShowApiKey] = useState(false);
  const [newPrompt, setNewPrompt] = useState({
    name: "",
    module: "",
    content: "",
  });

  const handleSaveApiConfig = () => {
    // In a real app, this would save to backend
    alert("C·∫•u h√¨nh API ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
  };

  const handleAddPrompt = () => {
    if (newPrompt.name && newPrompt.module && newPrompt.content) {
      const prompt = {
        id: prompts.length + 1,
        ...newPrompt,
        createdAt: new Date().toISOString().split('T')[0],
      };
      setPrompts([...prompts, prompt]);
      setNewPrompt({ name: "", module: "", content: "" });
      setIsAddPromptDialogOpen(false);
    }
  };

  const handleDeletePrompt = (id: number) => {
    setPrompts(prompts.filter(prompt => prompt.id !== id));
  };

  const handleFeatureToggle = (feature: string, enabled: boolean) => {
    setAiFeatures(prev => ({ ...prev, [feature]: enabled }));
  };

  const exportLogs = () => {
    // In a real app, this would generate and download CSV
    alert("ƒêang xu·∫•t b√°o c√°o CSV...");
  };

  const getModuleColor = (module: string) => {
    switch (module) {
      case "B√†i t·∫≠p":
        return "bg-blue-100 text-blue-800";
      case "L·ªô tr√¨nh":
        return "bg-green-100 text-green-800";
      case "Chatbot":
        return "bg-purple-100 text-purple-800";
      case "B√°o c√°o":
        return "bg-orange-100 text-orange-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Th√†nh c√¥ng":
        return "bg-green-100 text-green-800";
      case "L·ªói":
        return "bg-red-100 text-red-800";
      case "ƒêang x·ª≠ l√Ω":
        return "bg-yellow-100 text-yellow-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Page Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
              ü§ñ C·∫•u h√¨nh AI
              <Settings className="h-8 w-8 text-blue-600" />
            </h1>
            <p className="text-gray-600 mt-1">
              Qu·∫£n l√Ω c·∫•u h√¨nh v√† tham s·ªë c·ªßa h·ªá th·ªëng AI
            </p>
          </div>
        </div>

        {/* Main Content Tabs */}
        <Tabs defaultValue="api-config" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 bg-blue-50">
            <TabsTrigger value="api-config" className="flex items-center gap-2">
              <Cpu className="h-4 w-4" />
              C·∫•u h√¨nh API
            </TabsTrigger>
            <TabsTrigger value="prompts" className="flex items-center gap-2">
              <MessageSquare className="h-4 w-4" />
              Prompt m·∫´u
            </TabsTrigger>
            <TabsTrigger value="features" className="flex items-center gap-2">
              <Brain className="h-4 w-4" />
              T√≠nh nƒÉng AI
            </TabsTrigger>
            <TabsTrigger value="logs" className="flex items-center gap-2">
              <Activity className="h-4 w-4" />
              Log AI
            </TabsTrigger>
          </TabsList>

          {/* API Configuration Tab */}
          <TabsContent value="api-config">
            <Card className="border-blue-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-blue-700">
                  <Settings className="h-5 w-5" />
                  C·∫•u h√¨nh API
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="apiKey">API Key</Label>
                      <div className="flex gap-2">
                        <Input
                          id="apiKey"
                          type={showApiKey ? "text" : "password"}
                          value={apiConfig.apiKey}
                          onChange={(e) => setApiConfig({...apiConfig, apiKey: e.target.value})}
                          className="flex-1"
                        />
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setShowApiKey(!showApiKey)}
                        >
                          {showApiKey ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                        </Button>
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="model">Model AI</Label>
                      <Select value={apiConfig.model} onValueChange={(value) => setApiConfig({...apiConfig, model: value})}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="gpt-4">GPT-4</SelectItem>
                          <SelectItem value="gpt-4-turbo">GPT-4 Turbo</SelectItem>
                          <SelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo</SelectItem>
                          <SelectItem value="claude-3">Claude 3</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="temperature">
                        Temperature: {apiConfig.temperature[0]}
                      </Label>
                      <Slider
                        id="temperature"
                        min={0}
                        max={1}
                        step={0.1}
                        value={apiConfig.temperature}
                        onValueChange={(value) => setApiConfig({...apiConfig, temperature: value})}
                        className="mt-2"
                      />
                      <div className="flex justify-between text-xs text-gray-500 mt-1">
                        <span>Ch√≠nh x√°c (0)</span>
                        <span>S√°ng t·∫°o (1)</span>
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="maxTokens">Max Tokens</Label>
                      <Input
                        id="maxTokens"
                        type="number"
                        value={apiConfig.maxTokens}
                        onChange={(e) => setApiConfig({...apiConfig, maxTokens: parseInt(e.target.value)})}
                        min={1}
                        max={4000}
                      />
                    </div>
                  </div>
                </div>

                <div className="flex justify-end">
                  <Button onClick={handleSaveApiConfig} className="bg-blue-600 hover:bg-blue-700">
                    <Save className="h-4 w-4 mr-2" />
                    L∆∞u c·∫•u h√¨nh
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Prompts Management Tab */}
          <TabsContent value="prompts">
            <Card className="border-green-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2 text-green-700">
                    <MessageSquare className="h-5 w-5" />
                    Qu·∫£n l√Ω Prompt m·∫´u
                  </CardTitle>
                  <Dialog open={isAddPromptDialogOpen} onOpenChange={setIsAddPromptDialogOpen}>
                    <DialogTrigger asChild>
                      <Button className="bg-green-600 hover:bg-green-700">
                        <Plus className="h-4 w-4 mr-2" />
                        Th√™m prompt
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="sm:max-w-[600px]">
                      <DialogHeader>
                        <DialogTitle>Th√™m Prompt m·ªõi</DialogTitle>
                        <DialogDescription>
                          T·∫°o prompt m·∫´u cho c√°c module AI
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="promptName">T√™n prompt</Label>
                          <Input
                            id="promptName"
                            value={newPrompt.name}
                            onChange={(e) => setNewPrompt({...newPrompt, name: e.target.value})}
                            placeholder="Nh·∫≠p t√™n prompt"
                          />
                        </div>
                        <div>
                          <Label htmlFor="promptModule">Module √°p d·ª•ng</Label>
                          <Select value={newPrompt.module} onValueChange={(value) => setNewPrompt({...newPrompt, module: value})}>
                            <SelectTrigger>
                              <SelectValue placeholder="Ch·ªçn module" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="B√†i t·∫≠p">B√†i t·∫≠p</SelectItem>
                              <SelectItem value="L·ªô tr√¨nh">L·ªô tr√¨nh</SelectItem>
                              <SelectItem value="Chatbot">Chatbot</SelectItem>
                              <SelectItem value="B√°o c√°o">B√°o c√°o</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <Label htmlFor="promptContent">N·ªôi dung prompt</Label>
                          <Textarea
                            id="promptContent"
                            value={newPrompt.content}
                            onChange={(e) => setNewPrompt({...newPrompt, content: e.target.value})}
                            placeholder="Nh·∫≠p n·ªôi dung prompt chi ti·∫øt..."
                            rows={6}
                          />
                        </div>
                      </div>
                      <DialogFooter>
                        <Button onClick={handleAddPrompt}>L∆∞u</Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                </div>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>ID</TableHead>
                      <TableHead>T√™n prompt</TableHead>
                      <TableHead>N·ªôi dung</TableHead>
                      <TableHead>Module</TableHead>
                      <TableHead>Ng√†y t·∫°o</TableHead>
                      <TableHead className="text-center">H√†nh ƒë·ªông</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {prompts.map((prompt) => (
                      <TableRow key={prompt.id}>
                        <TableCell className="font-medium">{prompt.id}</TableCell>
                        <TableCell className="font-medium">{prompt.name}</TableCell>
                        <TableCell>
                          <div className="max-w-xs truncate" title={prompt.content}>
                            {prompt.content}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={getModuleColor(prompt.module)}>
                            {prompt.module}
                          </Badge>
                        </TableCell>
                        <TableCell>{prompt.createdAt}</TableCell>
                        <TableCell>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" className="h-8 w-8 p-0">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem>
                                <Edit className="mr-2 h-4 w-4" />
                                Ch·ªânh s·ª≠a
                              </DropdownMenuItem>
                              <DropdownMenuItem 
                                className="text-red-600"
                                onClick={() => handleDeletePrompt(prompt.id)}
                              >
                                <Trash2 className="mr-2 h-4 w-4" />
                                X√≥a
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Features Tab */}
          <TabsContent value="features">
            <Card className="border-purple-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-purple-700">
                  <Brain className="h-5 w-5" />
                  C·∫•u h√¨nh T√≠nh nƒÉng AI
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center">
                          ‚úÖ
                        </div>
                        <div>
                          <h3 className="font-medium">AI ch·∫•m b√†i</h3>
                          <p className="text-sm text-gray-600">T·ª± ƒë·ªông ch·∫•m ƒëi·ªÉm b√†i t·∫≠p c·ªßa h·ªçc sinh</p>
                        </div>
                      </div>
                      <Switch
                        checked={aiFeatures.autoGrading}
                        onCheckedChange={(checked) => handleFeatureToggle('autoGrading', checked)}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center">
                          üó∫Ô∏è
                        </div>
                        <div>
                          <h3 className="font-medium">AI sinh l·ªô tr√¨nh</h3>
                          <p className="text-sm text-gray-600">T·∫°o l·ªô tr√¨nh h·ªçc t·∫≠p c√° nh√¢n h√≥a</p>
                        </div>
                      </div>
                      <Switch
                        checked={aiFeatures.pathGeneration}
                        onCheckedChange={(checked) => handleFeatureToggle('pathGeneration', checked)}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                          ‚úèÔ∏è
                        </div>
                        <div>
                          <h3 className="font-medium">AI t·∫°o b√†i t·∫≠p</h3>
                          <p className="text-sm text-gray-600">Sinh t·ª± ƒë·ªông c√°c b√†i t·∫≠p ph√π h·ª£p</p>
                        </div>
                      </div>
                      <Switch
                        checked={aiFeatures.exerciseCreation}
                        onCheckedChange={(checked) => handleFeatureToggle('exerciseCreation', checked)}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 rounded-full bg-orange-100 flex items-center justify-center">
                          üìà
                        </div>
                        <div>
                          <h3 className="font-medium">AI b√°o c√°o ti·∫øn ƒë·ªô</h3>
                          <p className="text-sm text-gray-600">Ph√¢n t√≠ch v√† b√°o c√°o ti·∫øn ƒë·ªô h·ªçc t·∫≠p</p>
                        </div>
                      </div>
                      <Switch
                        checked={aiFeatures.progressReporting}
                        onCheckedChange={(checked) => handleFeatureToggle('progressReporting', checked)}
                      />
                    </div>
                  </div>

                  <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <h4 className="font-medium text-blue-900 mb-2">üìä Th·ªëng k√™ s·ª≠ d·ª•ng t√≠nh nƒÉng</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div>
                        <div className="text-2xl font-bold text-blue-600">245</div>
                        <div className="text-blue-600">B√†i ch·∫•m t·ª± ƒë·ªông</div>
                      </div>
                      <div>
                        <div className="text-2xl font-bold text-green-600">18</div>
                        <div className="text-green-600">L·ªô tr√¨nh ƒë√£ t·∫°o</div>
                      </div>
                      <div>
                        <div className="text-2xl font-bold text-orange-600">67</div>
                        <div className="text-orange-600">B√†i t·∫≠p AI sinh</div>
                      </div>
                      <div>
                        <div className="text-2xl font-bold text-purple-600">152</div>
                        <div className="text-purple-600">B√°o c√°o ƒë√£ t·∫°o</div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Logs Tab */}
          <TabsContent value="logs">
            <Card className="border-orange-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2 text-orange-700">
                    <Activity className="h-5 w-5" />
                    Theo d√µi Log AI
                  </CardTitle>
                  <Button onClick={exportLogs} variant="outline">
                    <Download className="h-4 w-4 mr-2" />
                    Xu·∫•t CSV
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Th·ªùi gian</TableHead>
                      <TableHead>Ng∆∞·ªùi d√πng</TableHead>
                      <TableHead>Module</TableHead>
                      <TableHead>Token ti√™u th·ª•</TableHead>
                      <TableHead>Chi ph√≠</TableHead>
                      <TableHead>Tr·∫°ng th√°i</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {mockAILogs.map((log) => (
                      <TableRow key={log.id}>
                        <TableCell className="font-mono text-sm">{log.timestamp}</TableCell>
                        <TableCell>{log.user}</TableCell>
                        <TableCell>
                          <Badge className={getModuleColor(log.module)}>
                            {log.module}
                          </Badge>
                        </TableCell>
                        <TableCell className="font-mono">{log.tokensUsed}</TableCell>
                        <TableCell className="font-mono text-green-600">{log.cost}</TableCell>
                        <TableCell>
                          <Badge className={getStatusColor(log.status)}>
                            {log.status}
                          </Badge>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>

                <div className="mt-6 grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                    <div className="text-2xl font-bold text-blue-600">1,245</div>
                    <div className="text-sm text-blue-600">T·ªïng request h√¥m nay</div>
                  </div>
                  <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                    <div className="text-2xl font-bold text-green-600">98.5%</div>
                    <div className="text-sm text-green-600">T·ªâ l·ªá th√†nh c√¥ng</div>
                  </div>
                  <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
                    <div className="text-2xl font-bold text-orange-600">45,678</div>
                    <div className="text-sm text-orange-600">Token s·ª≠ d·ª•ng</div>
                  </div>
                  <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                    <div className="text-2xl font-bold text-purple-600">$12.45</div>
                    <div className="text-sm text-purple-600">Chi ph√≠ h√¥m nay</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </AdminLayout>
  );
}
