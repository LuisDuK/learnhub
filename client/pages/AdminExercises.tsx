import React, { useState, useRef } from "react";
import { AdminLayout } from "@/components/AdminLayout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Progress } from "@/components/ui/progress";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Search,
  Plus,
  MoreHorizontal,
  Edit,
  Trash2,
  Eye,
  Upload,
  FileText,
  CheckCircle,
  PenTool,
  Filter,
  Bot,
  Copy,
  Download,
  X,
  Wand2,
  Loader2,
  Save,
  Import,
  Sparkles,
  BookOpen,
  Users,
  Clock,
  Grid3X3,
  List,
  Package,
  Building2,
  Star,
} from "lucide-react";

// Mock exercise data - includes both created and bank exercises
const mockExercises = [
  {
    id: 1,
    title: "Ph√©p c·ªông v√† tr·ª´ trong ph·∫°m vi 100",
    type: "Tr·∫Øc nghi·ªám",
    subject: "To√°n",
    creator: "C√¥ Nguy·ªÖn Th·ªã Mai",
    createdAt: "2024-01-15",
    totalQuestions: 10,
    difficulty: "D·ªÖ",
    submissions: 45,
    avgScore: 85,
    department: "Kh·ªëi l·ªõp 1-2",
    isFromBank: false,
    tags: ["c·ªông", "tr·ª´", "s·ªë h·ªçc"],
    description: "B√†i t·∫≠p c∆° b·∫£n v·ªÅ ph√©p c·ªông v√† tr·ª´",
    courseName: "To√°n h·ªçc c∆° b·∫£n",
  },
  {
    id: 2,
    title: "Vi·∫øt ƒëo·∫°n vƒÉn t·∫£ c·∫£nh thi√™n nhi√™n",
    type: "T·ª± lu·∫≠n",
    subject: "VƒÉn",
    creator: "C√¥ Tr·∫ßn Th·ªã Lan",
    createdAt: "2024-01-20",
    totalQuestions: 1,
    difficulty: "Trung b√¨nh",
    submissions: 32,
    avgScore: 78,
    department: "Kh·ªëi l·ªõp 3-5",
    isFromBank: false,
    tags: ["vƒÉn m·∫´u", "t·∫£ c·∫£nh"],
    description: "Luy·ªán t·∫≠p k·ªπ nƒÉng vi·∫øt t·∫£ c·∫£nh",
    courseName: "Ti·∫øng Vi·ªát l·ªõp 3",
  },
  {
    id: 3,
    title: "Colors and Numbers",
    type: "Tr·∫Øc nghi·ªám",
    subject: "Anh",
    creator: "Th·∫ßy John Smith",
    createdAt: "2024-01-10",
    totalQuestions: 15,
    difficulty: "D·ªÖ",
    submissions: 67,
    avgScore: 92,
    department: "Kh·ªëi m·∫ßm non",
    isFromBank: false,
    tags: ["m√†u s·∫Øc", "s·ªë ƒë·∫øm", "t·ª´ v·ª±ng"],
    description: "H·ªçc t·ª´ v·ª±ng v·ªÅ m√†u s·∫Øc v√† s·ªë",
    courseName: "Ti·∫øng Anh cho tr·∫ª em",
  },
  {
    id: 4,
    title: "Quan s√°t v√† m√¥ t·∫£ hi·ªán t∆∞·ª£ng",
    type: "T·ª± lu·∫≠n",
    subject: "To√°n",
    creator: "C√¥ L√™ Th·ªã Hoa",
    createdAt: "2024-01-25",
    totalQuestions: 3,
    difficulty: "Kh√≥",
    submissions: 28,
    avgScore: 65,
    department: "Kh·ªëi l·ªõp 3-5",
    isFromBank: true,
    tags: ["quan s√°t", "m√¥ t·∫£"],
    description: "B√†i tÔøΩÔøΩÔøΩp quan s√°t v√† m√¥ t·∫£ c√°c hi·ªán t∆∞·ª£ng",
    courseName: null, // Ch∆∞a g√°n v√†o kh√≥a h·ªçc n√†o
  },
  {
    id: 5,
    title: "B·∫£ng c·ª≠u ch∆∞∆°ng 2-3-4",
    type: "Tr·∫Øc nghi·ªám",
    subject: "To√°n",
    creator: "B·ªô GD&ƒêT",
    createdAt: "2024-01-01",
    totalQuestions: 20,
    difficulty: "D·ªÖ",
    submissions: 0,
    avgScore: 0,
    department: "Kh·ªëi l·ªõp 1-2",
    isFromBank: true,
    tags: ["b·∫£ng c·ª≠u ch∆∞∆°ng", "nh√¢n"],
    description: "B√†i t·∫≠p c∆° b·∫£n v·ªÅ b·∫£ng c·ª≠u ch∆∞∆°ng 2, 3, 4",
    courseName: null, // Ch∆∞a g√°n v√†o kh√≥a h·ªçc n√†o
  },
];

// Mock exercise bank - exercises available for assignment
const mockExerciseBank = [
  {
    id: 101,
    title: "B·∫£ng c·ª≠u ch∆∞∆°ng 2-3-4",
    type: "Tr·∫Øc nghi·ªám",
    subject: "To√°n",
    creator: "B·ªô GD&ƒêT",
    createdAt: "2024-01-01",
    totalQuestions: 20,
    difficulty: "D·ªÖ",
    usageCount: 156,
    rating: 4.8,
    department: "Kh·ªëi l·ªõp 1-2",
    tags: ["b·∫£ng c·ª≠u ch∆∞∆°ng", "nh√¢n"],
    description: "B√†i t·∫≠p c∆° b·∫£n v·ªÅ b·∫£ng c·ª≠u ch∆∞∆°ng 2, 3, 4",
    thumbnail: "üî¢",
  },
  {
    id: 102,
    title: "ƒê·ªçc hi·ªÉu vƒÉn b·∫£n ng·∫Øn",
    type: "H·ªón h·ª£p",
    subject: "VƒÉn",
    creator: "B·ªô GD&ƒêT",
    createdAt: "2024-01-05",
    totalQuestions: 8,
    difficulty: "Trung b√¨nh",
    usageCount: 89,
    rating: 4.6,
    department: "Kh·ªëi l·ªõp 3-5",
    tags: ["ƒë·ªçc hi·ªÉu", "vƒÉn b·∫£n"],
    description: "R√®n luy·ªán k·ªπ nƒÉng ƒë·ªçc hi·ªÉu vƒÉn b·∫£n",
    thumbnail: "üìñ",
  },
  {
    id: 103,
    title: "Family Members Vocabulary",
    type: "Tr·∫Øc nghi·ªám",
    subject: "Anh",
    creator: "Cambridge Kids",
    createdAt: "2024-01-03",
    totalQuestions: 12,
    difficulty: "D·ªÖ",
    usageCount: 234,
    rating: 4.9,
    department: "Kh·ªëi m·∫ßm non",
    tags: ["gia ƒë√¨nh", "t·ª´ v·ª±ng"],
    description: "H·ªçc t·ª´ v·ª±ng v·ªÅ c√°c th√†nh vi√™n trong gia ƒë√¨nh",
    thumbnail: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
  },
  {
    id: 104,
    title: "Ph√©p chia c√≥ d∆∞",
    type: "Tr·∫Øc nghi·ªám",
    subject: "To√°n",
    creator: "Tr∆∞·ªùng Ti·ªÉu h·ªçc Chu VƒÉn An",
    createdAt: "2024-01-12",
    totalQuestions: 15,
    difficulty: "Trung b√¨nh",
    usageCount: 67,
    rating: 4.4,
    department: "Kh·ªëi l·ªõp 3-5",
    tags: ["chia", "s·ªë d∆∞"],
    description: "Luy·ªán t·∫≠p ph√©p chia c√≥ s·ªë d∆∞",
    thumbnail: "‚ûó",
  },
  {
    id: 105,
    title: "T·∫£ ng∆∞·ªùi th√¢n",
    type: "T·ª± lu·∫≠n",
    subject: "VƒÉn",
    creator: "Tr∆∞·ªùng Ti·ªÉu h·ªçc Nguy·ªÖn Du",
    createdAt: "2024-01-18",
    totalQuestions: 2,
    difficulty: "D·ªÖ",
    usageCount: 45,
    rating: 4.2,
    department: "Kh·ªëi l·ªõp 1-2",
    tags: ["t·∫£ ng∆∞·ªùi", "gia ƒë√¨nh"],
    description: "Vi·∫øt ƒëo·∫°n vƒÉn t·∫£ v·ªÅ ng∆∞·ªùi th√¢n",
    thumbnail: "üë•",
  },
  {
    id: 106,
    title: "Weather and Seasons",
    type: "H·ªón h·ª£p",
    subject: "Anh",
    creator: "British Council Kids",
    createdAt: "2024-01-14",
    totalQuestions: 18,
    difficulty: "Trung b√¨nh",
    usageCount: 123,
    rating: 4.7,
    department: "Kh·ªëi l·ªõp 3-5",
    tags: ["th·ªùi ti·∫øt", "m√πa"],
    description: "T·ª´ v·ª±ng v√† c·∫•u tr√∫c c√¢u v·ªÅ th·ªùi ti·∫øt",
    thumbnail: "üå¶Ô∏è",
  },
];

const subjects = ["T·∫•t c·∫£", "To√°n", "VƒÉn", "Anh"];
const types = ["T·∫•t c·∫£", "Tr·∫Øc nghi·ªám", "T·ª± lu·∫≠n", "H·ªón h·ª£p"];
const difficulties = ["D·ªÖ", "Trung b√¨nh", "Kh√≥"];
const departments = ["T·∫•t c·∫£", "Kh·ªëi m·∫ßm non", "Kh·ªëi l·ªõp 1-2", "Kh·ªëi l·ªõp 3-5"];

interface Question {
  id?: string;
  question: string;
  type: "multiple_choice" | "essay" | "short_answer";
  options?: string[];
  correctAnswer?: string;
  explanation?: string;
  maxWords?: number;
  keywords?: string[];
  rubric?: string;
}

interface ExerciseForm {
  title: string;
  subject: string;
  type: string;
  difficulty: string;
  timeLimit?: number;
  description?: string;
  questions: Question[];
}

interface BankExercise {
  id: number;
  title: string;
  type: string;
  subject: string;
  creator: string;
  createdAt: string;
  totalQuestions: number;
  difficulty: string;
  usageCount: number;
  rating: number;
  department: string;
  tags: string[];
  description: string;
  thumbnail: string;
}

export default function AdminExercises() {
  const [exercises, setExercises] = useState(mockExercises);
  const [searchTerm, setSearchTerm] = useState("");
  const [subjectFilter, setSubjectFilter] = useState("T·∫•t c·∫£");
  const [typeFilter, setTypeFilter] = useState("TÔøΩÔøΩt c·∫£");
  const [departmentFilter, setDepartmentFilter] = useState("T·∫•t c·∫£");
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isAIDialogOpen, setIsAIDialogOpen] = useState(false);
  const [isBankDialogOpen, setIsBankDialogOpen] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingStep, setProcessingStep] = useState("");
  const [uploadProgress, setUploadProgress] = useState(0);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedExercises, setSelectedExercises] = useState<Set<number>>(new Set());
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Bank filters
  const [bankSearchTerm, setBankSearchTerm] = useState("");
  const [bankSubjectFilter, setBankSubjectFilter] = useState("T·∫•t c·∫£");
  const [bankDepartmentFilter, setBankDepartmentFilter] = useState("T·∫•t c·∫£");

  const [newExercise, setNewExercise] = useState<ExerciseForm>({
    title: "",
    subject: "",
    type: "",
    difficulty: "",
    timeLimit: 60,
    description: "",
    questions: [],
  });

  const [aiPrompt, setAiPrompt] = useState("");
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [bulkQuestions, setBulkQuestions] = useState("");

  const filteredExercises = exercises.filter((exercise) => {
    const matchesSearch =
      exercise.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      exercise.subject.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSubject =
      subjectFilter === "T·∫•t c·∫£" || exercise.subject === subjectFilter;
    const matchesType = typeFilter === "T·∫•t c·∫£" || exercise.type === typeFilter;
    const matchesDepartment =
      departmentFilter === "T·∫•t c·∫£" || exercise.department === departmentFilter;
    return matchesSearch && matchesSubject && matchesType && matchesDepartment;
  });

  const filteredBankExercises = mockExerciseBank.filter((exercise) => {
    const matchesSearch =
      exercise.title.toLowerCase().includes(bankSearchTerm.toLowerCase()) ||
      exercise.tags.some(tag => tag.includes(bankSearchTerm.toLowerCase()));
    const matchesSubject =
      bankSubjectFilter === "T·∫•t c·∫£" || exercise.subject === bankSubjectFilter;
    const matchesDepartment =
      bankDepartmentFilter === "T·∫•t c·∫£" || exercise.department === bankDepartmentFilter;
    return matchesSearch && matchesSubject && matchesDepartment;
  });

  const handleAddExercise = () => {
    if (
      newExercise.title &&
      newExercise.subject &&
      newExercise.type &&
      newExercise.difficulty &&
      newExercise.questions.length > 0
    ) {
      const exercise = {
        id: exercises.length + 1,
        title: newExercise.title,
        type: newExercise.type,
        subject: newExercise.subject,
        creator: "Admin Nguy·ªÖn ƒê·ª©c",
        createdAt: new Date().toISOString().split("T")[0],
        totalQuestions: newExercise.questions.length,
        difficulty: newExercise.difficulty,
        submissions: 0,
        avgScore: 0,
        department: "T√πy ch·ªânh",
        isFromBank: false,
        tags: [],
        description: newExercise.description || "",
      };
      setExercises([...exercises, exercise]);
      resetForm();
      setIsAddDialogOpen(false);
    }
  };

  const handleAssignFromBank = () => {
    const selectedBankExercises = Array.from(selectedExercises).map(id => {
      const bankExercise = mockExerciseBank.find(ex => ex.id === id);
      if (bankExercise) {
        return {
          id: exercises.length + selectedExercises.size + Math.random(),
          title: bankExercise.title,
          type: bankExercise.type,
          subject: bankExercise.subject,
          creator: `${bankExercise.creator} (T·ª´ kho)`,
          createdAt: new Date().toISOString().split("T")[0],
          totalQuestions: bankExercise.totalQuestions,
          difficulty: bankExercise.difficulty,
          submissions: 0,
          avgScore: 0,
          department: bankExercise.department,
          isFromBank: true,
          tags: bankExercise.tags,
          description: bankExercise.description,
        };
      }
      return null;
    }).filter(Boolean);

    setExercises([...exercises, ...selectedBankExercises]);
    setSelectedExercises(new Set());
    setIsBankDialogOpen(false);
  };

  const resetForm = () => {
    setNewExercise({
      title: "",
      subject: "",
      type: "",
      difficulty: "",
      timeLimit: 60,
      description: "",
      questions: [],
    });
  };

  const handleDeleteExercise = (id: number) => {
    setExercises(exercises.filter((exercise) => exercise.id !== id));
  };

  const addQuestion = (
    type: "multiple_choice" | "essay" | "short_answer" = "multiple_choice",
  ) => {
    const newQuestion: Question = {
      id: Date.now().toString(),
      question: "",
      type,
      ...(type === "multiple_choice" && {
        options: ["", "", "", ""],
        correctAnswer: "",
        explanation: "",
      }),
      ...(type === "essay" && {
        maxWords: 300,
        keywords: [],
        rubric: "",
      }),
      ...(type === "short_answer" && {
        correctAnswer: "",
        keywords: [],
      }),
    };
    setNewExercise({
      ...newExercise,
      questions: [...newExercise.questions, newQuestion],
    });
  };

  const updateQuestion = (index: number, field: string, value: any) => {
    const updatedQuestions = [...newExercise.questions];
    updatedQuestions[index] = { ...updatedQuestions[index], [field]: value };
    setNewExercise({ ...newExercise, questions: updatedQuestions });
  };

  const removeQuestion = (index: number) => {
    const updatedQuestions = newExercise.questions.filter(
      (_, i) => i !== index,
    );
    setNewExercise({ ...newExercise, questions: updatedQuestions });
  };

  const updateOption = (
    questionIndex: number,
    optionIndex: number,
    value: string,
  ) => {
    const updatedQuestions = [...newExercise.questions];
    if (updatedQuestions[questionIndex].options) {
      updatedQuestions[questionIndex].options![optionIndex] = value;
      setNewExercise({ ...newExercise, questions: updatedQuestions });
    }
  };

  const duplicateQuestion = (index: number) => {
    const questionToCopy = { ...newExercise.questions[index] };
    questionToCopy.id = Date.now().toString();
    const updatedQuestions = [...newExercise.questions];
    updatedQuestions.splice(index + 1, 0, questionToCopy);
    setNewExercise({ ...newExercise, questions: updatedQuestions });
  };

  // AI Exercise Generation
  const handleAIGeneration = async () => {
    setIsProcessing(true);
    setProcessingStep("ƒêang x·ª≠ l√Ω y√™u c·∫ßu AI...");

    try {
      // Simulate AI processing
      await new Promise((resolve) => setTimeout(resolve, 2000));
      setProcessingStep("T·∫°o c√¢u h·ªèi t·ª´ AI...");
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Mock AI generated questions
      const aiQuestions: Question[] = [
        {
          id: "ai1",
          question: "T·ªïng c·ªßa 25 + 37 b·∫±ng bao nhi√™u?",
          type: "multiple_choice",
          options: ["52", "62", "72", "82"],
          correctAnswer: "B",
          explanation: "25 + 37 = 62",
        },
        {
          id: "ai2",
          question: "H√£y gi·∫£i th√≠ch t·∫°i sao 5 x 6 = 30",
          type: "essay",
          maxWords: 100,
          keywords: ["ph√©p nh√¢n", "t√≠nh ch·∫•t", "v√≠ d·ª•"],
          rubric:
            "H·ªçc sinh c·∫ßn gi·∫£i th√≠ch kh√°i ni·ªám ph√©p nh√¢n v√† ƒë∆∞a ra v√≠ d·ª• c·ª• th·ªÉ",
        },
      ];

      setNewExercise({
        ...newExercise,
        questions: [...newExercise.questions, ...aiQuestions],
      });

      setProcessingStep("Ho√†n th√†nh!");
      await new Promise((resolve) => setTimeout(resolve, 500));
      setIsAIDialogOpen(false);
    } catch (error) {
      console.error("AI generation error:", error);
    } finally {
      setIsProcessing(false);
      setProcessingStep("");
      setAiPrompt("");
    }
  };

  // File Upload Processing
  const handleFileUpload = async (file: File) => {
    setIsProcessing(true);
    setUploadProgress(0);
    setProcessingStep("ƒêang t·∫£i file...");

    try {
      // Simulate file processing
      for (let i = 0; i <= 100; i += 10) {
        setUploadProgress(i);
        await new Promise((resolve) => setTimeout(resolve, 200));
      }

      setProcessingStep("Ph√¢n t√≠ch n·ªôi dung file...");
      await new Promise((resolve) => setTimeout(resolve, 1500));

      setProcessingStep("T·∫°o c√¢u h·ªèi t·ª´ file...");
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Mock questions from file
      const fileQuestions: Question[] = [
        {
          id: "file1",
          question: "Theo t√†i li·ªáu, ƒë√¢u l√† ƒë·∫∑c ƒëi·ªÉm ch√≠nh c·ªßa ph√©p c·ªông?",
          type: "multiple_choice",
          options: [
            "T√≠nh giao ho√°n",
            "T√≠nh k·∫øt h·ª£p",
            "C√≥ ph·∫ßn t·ª≠ ƒë∆°n v·ªã",
            "T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng",
          ],
          correctAnswer: "D",
          explanation: "Ph√©p c·ªông c√≥ ƒë·∫ßy ƒë·ªß c√°c t√≠nh ch·∫•t ƒë∆∞·ª£c li·ªát k√™",
        },
      ];

      setNewExercise({
        ...newExercise,
        questions: [...newExercise.questions, ...fileQuestions],
      });

      setProcessingStep("Ho√†n th√†nh!");
      await new Promise((resolve) => setTimeout(resolve, 500));
    } finally {
      setIsProcessing(false);
      setUploadProgress(0);
      setProcessingStep("");
      setUploadedFile(null);
    }
  };

  // Bulk Import Questions
  const handleBulkImport = () => {
    const lines = bulkQuestions.split("\n").filter((line) => line.trim());
    const questions: Question[] = [];

    lines.forEach((line, index) => {
      if (line.startsWith("Q:")) {
        const questionText = line.substring(2).trim();
        questions.push({
          id: `bulk_${index}`,
          question: questionText,
          type: "short_answer",
          correctAnswer: "",
          keywords: [],
        });
      }
    });

    setNewExercise({
      ...newExercise,
      questions: [...newExercise.questions, ...questions],
    });

    setBulkQuestions("");
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case "Tr·∫Øc nghi·ªám":
        return "bg-blue-100 text-blue-800";
      case "T·ª± lu·∫≠n":
        return "bg-purple-100 text-purple-800";
      case "H·ªón h·ª£p":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "D·ªÖ":
        return "bg-green-100 text-green-800";
      case "Trung b√¨nh":
        return "bg-yellow-100 text-yellow-800";
      case "Kh√≥":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const renderQuestionForm = (question: Question, index: number) => {
    return (
      <div
        key={question.id || index}
        className="p-4 border border-gray-200 rounded-lg space-y-3"
      >
        <div className="flex items-center justify-between">
          <Label className="text-lg font-semibold">C√¢u h·ªèi {index + 1}</Label>
          <div className="flex gap-2">
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => duplicateQuestion(index)}
            >
              <Copy className="h-4 w-4" />
            </Button>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => removeQuestion(index)}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>

        <div>
          <Label>Lo·∫°i c√¢u h·ªèi</Label>
          <Select
            value={question.type}
            onValueChange={(
              value: "multiple_choice" | "essay" | "short_answer",
            ) => updateQuestion(index, "type", value)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="multiple_choice">Tr·∫Øc nghi·ªám</SelectItem>
              <SelectItem value="essay">T·ª± lu·∫≠n d√†i</SelectItem>
              <SelectItem value="short_answer">Tr·∫£ l·ªùi ng·∫Øn</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div>
          <Label>C√¢u h·ªèi</Label>
          <Textarea
            value={question.question}
            onChange={(e) => updateQuestion(index, "question", e.target.value)}
            placeholder="Nh·∫≠p c√¢u h·ªèi..."
            rows={3}
          />
        </div>

        {question.type === "multiple_choice" && (
          <>
            <div className="space-y-2">
              <Label>C√°c l·ª±a ch·ªçn</Label>
              {question.options?.map((option, oIndex) => (
                <div key={oIndex} className="flex items-center gap-2">
                  <span className="text-sm font-medium w-6">
                    {String.fromCharCode(65 + oIndex)}.
                  </span>
                  <Input
                    value={option}
                    onChange={(e) =>
                      updateOption(index, oIndex, e.target.value)
                    }
                    placeholder={`L·ª±a ch·ªçn ${String.fromCharCode(65 + oIndex)}`}
                  />
                </div>
              ))}
            </div>

            <div>
              <Label>ƒê√°p √°n ƒë√∫ng</Label>
              <Select
                value={question.correctAnswer}
                onValueChange={(value) =>
                  updateQuestion(index, "correctAnswer", value)
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn ƒë√°p √°n ƒë√∫ng" />
                </SelectTrigger>
                <SelectContent>
                  {question.options?.map((_, oIndex) => (
                    <SelectItem
                      key={oIndex}
                      value={String.fromCharCode(65 + oIndex)}
                    >
                      {String.fromCharCode(65 + oIndex)}.{" "}
                      {question.options![oIndex]}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>Gi·∫£i th√≠ch (t√πy ch·ªçn)</Label>
              <Textarea
                value={question.explanation || ""}
                onChange={(e) =>
                  updateQuestion(index, "explanation", e.target.value)
                }
                placeholder="Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n n√†y ƒë√∫ng..."
                rows={2}
              />
            </div>
          </>
        )}

        {question.type === "essay" && (
          <>
            <div>
              <Label>S·ªë t·ª´ t·ªëi ƒëa</Label>
              <Input
                type="number"
                value={question.maxWords || 300}
                onChange={(e) =>
                  updateQuestion(index, "maxWords", parseInt(e.target.value))
                }
                placeholder="300"
              />
            </div>
            <div>
              <Label>T·ª´ kh√≥a ƒë√°nh gi√° (c√°ch nhau b·ªüi d·∫•u ph·∫©y)</Label>
              <Input
                value={question.keywords?.join(", ") || ""}
                onChange={(e) =>
                  updateQuestion(
                    index,
                    "keywords",
                    e.target.value.split(", ").filter((k) => k.trim()),
                  )
                }
                placeholder="t·ª´ kh√≥a 1, t·ª´ kh√≥a 2, t·ª´ kh√≥a 3"
              />
            </div>
            <div>
              <Label>Rubric ƒë√°nh gi√°</Label>
              <Textarea
                value={question.rubric || ""}
                onChange={(e) =>
                  updateQuestion(index, "rubric", e.target.value)
                }
                placeholder="Ti√™u ch√≠ ƒë√°nh gi√° b√†i l√†m c·ªßa h·ªçc sinh..."
                rows={3}
              />
            </div>
          </>
        )}

        {question.type === "short_answer" && (
          <>
            <div>
              <Label>ƒê√°p √°n m·∫´u</Label>
              <Input
                value={question.correctAnswer || ""}
                onChange={(e) =>
                  updateQuestion(index, "correctAnswer", e.target.value)
                }
                placeholder="ƒê√°p √°n ƒë√∫ng..."
              />
            </div>
            <div>
              <Label>T·ª´ kh√≥a ch·∫•p nh·∫≠n (c√°ch nhau b·ªüi d·∫•u ph·∫©y)</Label>
              <Input
                value={question.keywords?.join(", ") || ""}
                onChange={(e) =>
                  updateQuestion(
                    index,
                    "keywords",
                    e.target.value.split(", ").filter((k) => k.trim()),
                  )
                }
                placeholder="t·ª´ kh√≥a 1, t·ª´ kh√≥a 2"
              />
            </div>
          </>
        )}
      </div>
    );
  };

  const renderBankExerciseCard = (exercise: BankExercise) => {
    const isSelected = selectedExercises.has(exercise.id);
    
    return (
      <Card 
        key={exercise.id} 
        className={`cursor-pointer transition-all hover:shadow-lg ${
          isSelected ? 'ring-2 ring-blue-500 bg-blue-50' : ''
        }`}
        onClick={() => {
          const newSelected = new Set(selectedExercises);
          if (isSelected) {
            newSelected.delete(exercise.id);
          } else {
            newSelected.add(exercise.id);
          }
          setSelectedExercises(newSelected);
        }}
      >
        <CardHeader className="pb-3">
          <div className="flex items-start justify-between">
            <div className="flex items-center gap-3">
              <div className="text-2xl">{exercise.thumbnail}</div>
              <div className="flex-1">
                <CardTitle className="text-sm line-clamp-2">
                  {exercise.title}
                </CardTitle>
                <div className="flex items-center gap-2 mt-1">
                  <Badge variant="outline" className="text-xs">
                    {exercise.subject}
                  </Badge>
                  <Badge className={`text-xs ${getTypeColor(exercise.type)}`}>
                    {exercise.type}
                  </Badge>
                </div>
              </div>
            </div>
            <Checkbox
              checked={isSelected}
              onChange={() => {}}
              className="mt-1"
            />
          </div>
        </CardHeader>
        <CardContent className="pt-0">
          <p className="text-xs text-gray-600 line-clamp-2 mb-3">
            {exercise.description}
          </p>
          
          <div className="space-y-2">
            <div className="flex items-center justify-between text-xs">
              <span className="text-gray-500">Kh·ªëi:</span>
              <span className="font-medium">{exercise.department}</span>
            </div>
            <div className="flex items-center justify-between text-xs">
              <span className="text-gray-500">ƒê·ªô kh√≥:</span>
              <Badge className={`text-xs ${getDifficultyColor(exercise.difficulty)}`}>
                {exercise.difficulty}
              </Badge>
            </div>
            <div className="flex items-center justify-between text-xs">
              <span className="text-gray-500">ƒê√°nh gi√°:</span>
              <div className="flex items-center gap-1">
                <Star className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                <span className="font-medium">{exercise.rating}</span>
              </div>
            </div>
            <div className="flex items-center justify-between text-xs">
              <span className="text-gray-500">ƒê√£ s·ª≠ d·ª•ng:</span>
              <span className="font-medium">{exercise.usageCount} l·∫ßn</span>
            </div>
          </div>

          <div className="flex flex-wrap gap-1 mt-3">
            {exercise.tags.slice(0, 3).map((tag, index) => (
              <span
                key={index}
                className="px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs"
              >
                #{tag}
              </span>
            ))}
            {exercise.tags.length > 3 && (
              <span className="px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs">
                +{exercise.tags.length - 3}
              </span>
            )}
          </div>
        </CardContent>
      </Card>
    );
  };

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Page Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              <PenTool className="inline-block h-8 w-8 mr-2" />
              Qu·∫£n l√Ω b√†i t·∫≠p
            </h1>
            <p className="text-gray-600 mt-1">
              Qu·∫£n l√Ω b√†i t·∫≠p c·ªßa kh√≥a h·ªçc - t·∫°o m·ªõi ho·∫∑c g√°n t·ª´ kho b√†i t·∫≠p
            </p>
          </div>

          <div className="flex gap-2">
            {/* Exercise Bank Dialog */}
            <Dialog open={isBankDialogOpen} onOpenChange={setIsBankDialogOpen}>
              <DialogTrigger asChild>
                <Button
                  variant="outline"
                  className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white border-0"
                >
                  <Package className="h-4 w-4 mr-2" />
                  Kho b√†i t·∫≠p
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[1200px] max-h-[90vh] overflow-hidden">
                <DialogHeader>
                  <DialogTitle className="flex items-center gap-2">
                    <Package className="h-5 w-5 text-green-500" />
                    Kho b√†i t·∫≠p - Ch·ªçn b√†i t·∫≠p ƒë·ªÉ g√°n
                  </DialogTitle>
                  <DialogDescription>
                    Duy·ªát v√† ch·ªçn b√†i t·∫≠p t·ª´ kho ƒë·ªÉ g√°n v√†o kh√≥a h·ªçc. C√≥ th·ªÉ ch·ªçn nhi·ªÅu b√†i t·∫≠p c√πng l√∫c.
                  </DialogDescription>
                </DialogHeader>

                <div className="space-y-4">
                  {/* Bank Search and Filters */}
                  <div className="flex items-center gap-4 p-4 bg-gray-50 rounded-lg">
                    <div className="relative flex-1 max-w-md">
                      <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
                      <Input
                        placeholder="T√¨m ki·∫øm trong kho b√†i t·∫≠p..."
                        value={bankSearchTerm}
                        onChange={(e) => setBankSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                    <Select value={bankSubjectFilter} onValueChange={setBankSubjectFilter}>
                      <SelectTrigger className="w-40">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {subjects.map((subject) => (
                          <SelectItem key={subject} value={subject}>
                            {subject}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <Select value={bankDepartmentFilter} onValueChange={setBankDepartmentFilter}>
                      <SelectTrigger className="w-40">
                        <Building2 className="h-4 w-4 mr-2" />
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {departments.map((dept) => (
                          <SelectItem key={dept} value={dept}>
                            {dept}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setViewMode('grid')}
                        className={viewMode === 'grid' ? 'bg-blue-100' : ''}
                      >
                        <Grid3X3 className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setViewMode('list')}
                        className={viewMode === 'list' ? 'bg-blue-100' : ''}
                      >
                        <List className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  {/* Selected Counter */}
                  {selectedExercises.size > 0 && (
                    <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <span className="text-blue-800 font-medium">
                        ƒê√£ ch·ªçn {selectedExercises.size} b√†i t·∫≠p
                      </span>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setSelectedExercises(new Set())}
                      >
                        B·ªè ch·ªçn t·∫•t c·∫£
                      </Button>
                    </div>
                  )}

                  {/* Exercise Bank Grid/List */}
                  <div className="overflow-y-auto max-h-[500px]">
                    {viewMode === 'grid' ? (
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {filteredBankExercises.map((exercise) => renderBankExerciseCard(exercise))}
                      </div>
                    ) : (
                      <div className="space-y-2">
                        {filteredBankExercises.map((exercise) => (
                          <Card
                            key={exercise.id}
                            className={`cursor-pointer transition-all hover:shadow-md ${
                              selectedExercises.has(exercise.id) ? 'ring-2 ring-blue-500 bg-blue-50' : ''
                            }`}
                            onClick={() => {
                              const newSelected = new Set(selectedExercises);
                              if (selectedExercises.has(exercise.id)) {
                                newSelected.delete(exercise.id);
                              } else {
                                newSelected.add(exercise.id);
                              }
                              setSelectedExercises(newSelected);
                            }}
                          >
                            <CardContent className="p-4">
                              <div className="flex items-center gap-4">
                                <Checkbox
                                  checked={selectedExercises.has(exercise.id)}
                                  onChange={() => {}}
                                />
                                <div className="text-2xl">{exercise.thumbnail}</div>
                                <div className="flex-1">
                                  <h3 className="font-semibold">{exercise.title}</h3>
                                  <p className="text-sm text-gray-600 line-clamp-1">
                                    {exercise.description}
                                  </p>
                                  <div className="flex items-center gap-2 mt-2">
                                    <Badge variant="outline" className="text-xs">
                                      {exercise.subject}
                                    </Badge>
                                    <Badge className={`text-xs ${getTypeColor(exercise.type)}`}>
                                      {exercise.type}
                                    </Badge>
                                    <Badge className={`text-xs ${getDifficultyColor(exercise.difficulty)}`}>
                                      {exercise.difficulty}
                                    </Badge>
                                  </div>
                                </div>
                                <div className="text-right text-sm">
                                  <div className="flex items-center gap-1 mb-1">
                                    <Star className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                                    <span>{exercise.rating}</span>
                                  </div>
                                  <div className="text-gray-500">
                                    {exercise.usageCount} l∆∞·ª£t s·ª≠ d·ª•ng
                                  </div>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                <DialogFooter>
                  <Button
                    variant="outline"
                    onClick={() => {
                      setSelectedExercises(new Set());
                      setIsBankDialogOpen(false);
                    }}
                  >
                    ƒê√≥ng
                  </Button>
                  <Button
                    onClick={handleAssignFromBank}
                    disabled={selectedExercises.size === 0}
                    className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    G√°n {selectedExercises.size} b√†i t·∫≠p ƒë∆∞·ª£c ch·ªçn
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* AI Dialog */}
            <Dialog open={isAIDialogOpen} onOpenChange={setIsAIDialogOpen}>
              <DialogTrigger asChild>
                <Button
                  variant="outline"
                  className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white border-0"
                >
                  <Bot className="h-4 w-4 mr-2" />
                  AI T·∫°o b√†i t·∫≠p
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[500px]">
                <DialogHeader>
                  <DialogTitle className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5 text-purple-500" />
                    AI T·∫°o b√†i t·∫≠p
                  </DialogTitle>
                  <DialogDescription>
                    M√¥ t·∫£ y√™u c·∫ßu v√† AI s·∫Ω t·∫°o b√†i t·∫≠p ph√π h·ª£p cho b·∫°n
                  </DialogDescription>
                </DialogHeader>

                {isProcessing ? (
                  <div className="space-y-4 py-4">
                    <div className="flex items-center gap-2">
                      <Loader2 className="h-4 w-4 animate-spin" />
                      <span>{processingStep}</span>
                    </div>
                    <Progress value={uploadProgress} className="w-full" />
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div>
                      <Label>M√¥ t·∫£ b√†i t·∫≠p c·∫ßn t·∫°o</Label>
                      <Textarea
                        value={aiPrompt}
                        onChange={(e) => setAiPrompt(e.target.value)}
                        placeholder="V√≠ d·ª•: T·∫°o 5 c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ ph√©p c·ªông trong ph·∫°m vi 100, ƒë·ªô kh√≥ v·ª´a ph·∫£i cho h·ªçc sinh l·ªõp 2..."
                        rows={4}
                      />
                    </div>

                    <div className="space-y-2">
                      <Label>Ho·∫∑c upload file t√†i li·ªáu</Label>
                      <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                        <input
                          type="file"
                          ref={fileInputRef}
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              setUploadedFile(file);
                              handleFileUpload(file);
                            }
                          }}
                          accept=".pdf,.docx,.xlsx,.txt"
                          className="hidden"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => fileInputRef.current?.click()}
                          className="w-full"
                        >
                          <Upload className="h-4 w-4 mr-2" />
                          Ch·ªçn file (PDF, Word, Excel, TXT)
                        </Button>
                        {uploadedFile && (
                          <p className="text-sm text-gray-600 mt-2">
                            ƒê√£ ch·ªçn: {uploadedFile.name}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                <DialogFooter>
                  <Button
                    onClick={handleAIGeneration}
                    disabled={!aiPrompt.trim() || isProcessing}
                    className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
                  >
                    <Wand2 className="h-4 w-4 mr-2" />
                    T·∫°o b√†i t·∫≠p
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* Main Exercise Dialog */}
            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
              <DialogTrigger asChild>
                <Button className="bg-gradient-to-r from-blue-500 to-orange-500 hover:from-blue-600 hover:to-orange-600 text-white">
                  <Plus className="h-4 w-4 mr-2" />
                  T·∫°o b√†i t·∫≠p m·ªõi
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[900px] max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>T·∫°o b√†i t·∫≠p m·ªõi</DialogTitle>
                  <DialogDescription>
                    T·∫°o b√†i t·∫≠p v·ªõi nhi·ªÅu d·∫°ng c√¢u h·ªèi kh√°c nhau
                  </DialogDescription>
                </DialogHeader>

                <Tabs defaultValue="basic" className="w-full">
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="basic">Th√¥ng tin c∆° b·∫£n</TabsTrigger>
                    <TabsTrigger value="questions">
                      C√¢u h·ªèi ({newExercise.questions.length})
                    </TabsTrigger>
                    <TabsTrigger value="import">Import h√†ng lo·∫°t</TabsTrigger>
                  </TabsList>

                  <TabsContent value="basic" className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>T√™n b√†i t·∫≠p</Label>
                        <Input
                          value={newExercise.title}
                          onChange={(e) =>
                            setNewExercise({
                              ...newExercise,
                              title: e.target.value,
                            })
                          }
                          placeholder="Nh·∫≠p t√™n b√†i t·∫≠p"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>M√¥n h·ªçc</Label>
                        <Select
                          value={newExercise.subject}
                          onValueChange={(value) =>
                            setNewExercise({ ...newExercise, subject: value })
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn m√¥n h·ªçc" />
                          </SelectTrigger>
                          <SelectContent>
                            {subjects.slice(1).map((subject) => (
                              <SelectItem key={subject} value={subject}>
                                {subject}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div className="grid grid-cols-3 gap-4">
                      <div className="space-y-2">
                        <Label>Lo·∫°i b√†i t·∫≠p</Label>
                        <Select
                          value={newExercise.type}
                          onValueChange={(value) =>
                            setNewExercise({ ...newExercise, type: value })
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn lo·∫°i" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Tr·∫Øc nghi·ªám">
                              Tr·∫Øc nghi·ªám
                            </SelectItem>
                            <SelectItem value="T·ª± lu·∫≠n">T·ª± lu·∫≠n</SelectItem>
                            <SelectItem value="H·ªón h·ª£p">H·ªón h·ª£p</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label>ƒê·ªô kh√≥</Label>
                        <Select
                          value={newExercise.difficulty}
                          onValueChange={(value) =>
                            setNewExercise({
                              ...newExercise,
                              difficulty: value,
                            })
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn ƒë·ªô kh√≥" />
                          </SelectTrigger>
                          <SelectContent>
                            {difficulties.map((difficulty) => (
                              <SelectItem key={difficulty} value={difficulty}>
                                {difficulty}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label>Th·ªùi gian (ph√∫t)</Label>
                        <Input
                          type="number"
                          value={newExercise.timeLimit}
                          onChange={(e) =>
                            setNewExercise({
                              ...newExercise,
                              timeLimit: parseInt(e.target.value),
                            })
                          }
                          placeholder="60"
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label>M√¥ t·∫£ b√†i t·∫≠p</Label>
                      <Textarea
                        value={newExercise.description}
                        onChange={(e) =>
                          setNewExercise({
                            ...newExercise,
                            description: e.target.value,
                          })
                        }
                        placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ b√†i t·∫≠p..."
                        rows={3}
                      />
                    </div>
                  </TabsContent>

                  <TabsContent value="questions" className="space-y-4">
                    <div className="flex items-center justify-between">
                      <Label className="text-lg font-semibold">
                        Danh s√°ch c√¢u h·ªèi
                      </Label>
                      <div className="flex gap-2">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="outline" size="sm">
                              <Plus className="h-4 w-4 mr-2" />
                              Th√™m c√¢u h·ªèi
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent>
                            <DropdownMenuItem
                              onClick={() => addQuestion("multiple_choice")}
                            >
                              <CheckCircle className="mr-2 h-4 w-4" />
                              Tr·∫Øc nghi·ªám
                            </DropdownMenuItem>
                            <DropdownMenuItem
                              onClick={() => addQuestion("essay")}
                            >
                              <FileText className="mr-2 h-4 w-4" />
                              T·ª± lu·∫≠n d√†i
                            </DropdownMenuItem>
                            <DropdownMenuItem
                              onClick={() => addQuestion("short_answer")}
                            >
                              <Edit className="mr-2 h-4 w-4" />
                              Tr·∫£ l·ªùi ng·∫Øn
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </div>

                    {newExercise.questions.length === 0 && (
                      <div className="text-center py-8 text-gray-500">
                        <PenTool className="h-12 w-12 mx-auto mb-2 opacity-50" />
                        <p>Ch∆∞a c√≥ c√¢u h·ªèi n√†o. Th√™m c√¢u h·ªèi ƒë·∫ßu ti√™n!</p>
                      </div>
                    )}

                    <div className="space-y-4">
                      {newExercise.questions.map((question, index) =>
                        renderQuestionForm(question, index),
                      )}
                    </div>
                  </TabsContent>

                  <TabsContent value="import" className="space-y-4">
                    <div className="space-y-4">
                      <div>
                        <Label className="text-lg font-semibold">
                          Import c√¢u h·ªèi h√†ng lo·∫°t
                        </Label>
                        <p className="text-sm text-gray-600">
                          Nh·∫≠p nhi·ªÅu c√¢u h·ªèi c√πng l√∫c, m·ªói c√¢u h·ªèi b·∫Øt ƒë·∫ßu b·∫±ng
                          "Q:"
                        </p>
                      </div>

                      <Textarea
                        value={bulkQuestions}
                        onChange={(e) => setBulkQuestions(e.target.value)}
                        placeholder={`Q: 2 + 3 = ?
Q: Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† g√¨?
Q: Vi·∫øt ƒëo·∫°n vƒÉn t·∫£ v·ªÅ m√πa xu√¢n`}
                        rows={10}
                        className="font-mono"
                      />

                      <div className="flex gap-2">
                        <Button
                          onClick={handleBulkImport}
                          disabled={!bulkQuestions.trim()}
                        >
                          <Import className="h-4 w-4 mr-2" />
                          Import c√¢u h·ªèi
                        </Button>
                        <Button
                          variant="outline"
                          onClick={() => setBulkQuestions("")}
                        >
                          X√≥a t·∫•t c·∫£
                        </Button>
                      </div>

                      <div className="p-4 bg-blue-50 rounded-lg">
                        <h4 className="font-semibold text-blue-900 mb-2">
                          H∆∞·ªõng d·∫´n ƒë·ªãnh d·∫°ng:
                        </h4>
                        <ul className="text-sm text-blue-800 space-y-1">
                          <li>‚Ä¢ M·ªói c√¢u h·ªèi b·∫Øt ƒë·∫ßu b·∫±ng "Q:"</li>
                          <li>
                            ‚Ä¢ C√¢u h·ªèi s·∫Ω ƒë∆∞·ª£c t·∫°o d·∫°ng tr·∫£ l·ªùi ng·∫Øn m·∫∑c ƒë·ªãnh
                          </li>
                          <li>
                            ‚Ä¢ C√≥ th·ªÉ ch·ªânh s·ª≠a lo·∫°i c√¢u h·ªèi sau khi import
                          </li>
                        </ul>
                      </div>
                    </div>
                  </TabsContent>
                </Tabs>

                <DialogFooter>
                  <Button
                    variant="outline"
                    onClick={() => {
                      resetForm();
                      setIsAddDialogOpen(false);
                    }}
                  >
                    H·ªßy
                  </Button>
                  <Button
                    onClick={handleAddExercise}
                    disabled={
                      !newExercise.title ||
                      !newExercise.subject ||
                      newExercise.questions.length === 0
                    }
                  >
                    <Save className="h-4 w-4 mr-2" />
                    L∆∞u b√†i t·∫≠p
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Search and Filter Bar */}
        <div className="flex items-center gap-4 p-4 bg-white rounded-lg border border-gray-200">
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
            <Input
              placeholder="T√¨m ki·∫øm b√†i t·∫≠p..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          <Select value={subjectFilter} onValueChange={setSubjectFilter}>
            <SelectTrigger className="w-40">
              <Filter className="h-4 w-4 mr-2" />
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {subjects.map((subject) => (
                <SelectItem key={subject} value={subject}>
                  {subject}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Select value={typeFilter} onValueChange={setTypeFilter}>
            <SelectTrigger className="w-40">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {types.map((type) => (
                <SelectItem key={type} value={type}>
                  {type}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Select value={departmentFilter} onValueChange={setDepartmentFilter}>
            <SelectTrigger className="w-40">
              <Building2 className="h-4 w-4 mr-2" />
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {departments.map((dept) => (
                <SelectItem key={dept} value={dept}>
                  {dept}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Exercises Table */}
        <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
          <Table>
            <TableHeader className="bg-gray-50">
              <TableRow>
                <TableHead className="font-semibold">ID</TableHead>
                <TableHead className="font-semibold">T√™n b√†i t·∫≠p</TableHead>
                <TableHead className="font-semibold">Lo·∫°i</TableHead>
                <TableHead className="font-semibold">M√¥n h·ªçc</TableHead>
                <TableHead className="font-semibold">ƒê·ªô kh√≥</TableHead>
                <TableHead className="font-semibold">Kh·ªëi</TableHead>
                <TableHead className="font-semibold">Kh√≥a h·ªçc</TableHead>
                <TableHead className="font-semibold">Ng∆∞·ªùi t·∫°o</TableHead>
                <TableHead className="font-semibold">Ngu·ªìn</TableHead>
                <TableHead className="font-semibold text-center">
                  H√†nh ƒë·ªông
                </TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredExercises.map((exercise) => (
                <TableRow key={exercise.id} className="hover:bg-gray-50">
                  <TableCell className="font-medium">{exercise.id}</TableCell>
                  <TableCell>
                    <div>
                      <p className="font-medium text-gray-900">
                        {exercise.title}
                      </p>
                      <p className="text-xs text-gray-500">
                        {exercise.totalQuestions} c√¢u h·ªèi
                      </p>
                      {exercise.description && (
                        <p className="text-xs text-gray-400 line-clamp-1 mt-1">
                          {exercise.description}
                        </p>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge className={getTypeColor(exercise.type)}>
                      {exercise.type}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline">{exercise.subject}</Badge>
                  </TableCell>
                  <TableCell>
                    <Badge className={getDifficultyColor(exercise.difficulty)}>
                      {exercise.difficulty}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="secondary" className="text-xs">
                      {exercise.department}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {exercise.courseName ? (
                      <Badge variant="outline" className="text-xs bg-blue-50 text-blue-700">
                        {exercise.courseName}
                      </Badge>
                    ) : (
                      <Badge variant="outline" className="text-xs bg-gray-50 text-gray-500">
                        Ch∆∞a g√°n
                      </Badge>
                    )}
                  </TableCell>
                  <TableCell className="text-sm text-gray-600">
                    {exercise.creator}
                  </TableCell>
                  <TableCell>
                    <Badge 
                      variant={exercise.isFromBank ? "default" : "outline"}
                      className="text-xs"
                    >
                      {exercise.isFromBank ? "T·ª´ kho" : "TÔøΩÔøΩÔøΩ t·∫°o"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem>
                          <Eye className="mr-2 h-4 w-4" />
                          Xem chi ti·∫øt
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Edit className="mr-2 h-4 w-4" />
                          Ch·ªânh s·ª≠a
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Copy className="mr-2 h-4 w-4" />
                          Sao ch√©p
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Download className="mr-2 h-4 w-4" />
                          Xu·∫•t Excel
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          className="text-red-600"
                          onClick={() => handleDeleteExercise(exercise.id)}
                        >
                          <Trash2 className="mr-2 h-4 w-4" />
                          G·ª° b·ªè
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>

        {/* Summary Stats */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
            <div className="text-2xl font-bold text-blue-600">
              {exercises.length}
            </div>
            <div className="text-sm text-blue-600">T·ªïng b√†i t·∫≠p</div>
          </div>
          <div className="bg-green-50 p-4 rounded-lg border border-green-200">
            <div className="text-2xl font-bold text-green-600">
              {exercises.filter((e) => e.type === "Tr·∫Øc nghi·ªám").length}
            </div>
            <div className="text-sm text-green-600">Tr·∫Øc nghi·ªám</div>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
            <div className="text-2xl font-bold text-purple-600">
              {exercises.filter((e) => e.type === "T·ª± lu·∫≠n").length}
            </div>
            <div className="text-sm text-purple-600">T·ª± lu·∫≠n</div>
          </div>
          <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
            <div className="text-2xl font-bold text-orange-600">
              {exercises.filter((e) => e.isFromBank).length}
            </div>
            <div className="text-sm text-orange-600">T·ª´ kho b√†i t·∫≠p</div>
          </div>
          <div className="bg-red-50 p-4 rounded-lg border border-red-200">
            <div className="text-2xl font-bold text-red-600">
              {exercises.reduce((sum, e) => sum + e.submissions, 0)}
            </div>
            <div className="text-sm text-red-600">T·ªïng b√†i n·ªôp</div>
          </div>
        </div>
      </div>
    </AdminLayout>
  );
}
