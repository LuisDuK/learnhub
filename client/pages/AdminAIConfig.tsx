import React, { useEffect, useMemo, useRef, useState } from "react";
import { AdminLayout } from "@/components/AdminLayout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Settings,
  Brain,
  MessageSquare,
  FileText,
  Plus,
  Save,
  Download,
  Edit,
  Trash2,
  MoreHorizontal,
  Eye,
  EyeOff,
  Cpu,
  Activity,
  History,
  Copy,
  Undo2,
  ListChecks,
  CheckCircle,
  XCircle,
} from "lucide-react";

// Types (frontend-only)
type AiFeatureModule = "B√†i t·∫≠p" | "L·ªô tr√¨nh" | "Chatbot" | "Ch·∫•m b√†i" | "B√°o c√°o";

type VariableType = "text" | "textarea" | "number" | "select";
interface AiPromptVariable {
  name: string;
  type: VariableType;
  description?: string;
  options?: string[];
  min?: number;
  max?: number;
}
interface AiPromptVersion {
  version: number;
  name: string;
  module: AiFeatureModule;
  content: string;
  variables: AiPromptVariable[];
  createdAt: string;
  createdBy?: string;
}
interface AiPromptTemplate {
  id: number;
  name: string;
  module: AiFeatureModule;
  content: string;
  variables: AiPromptVariable[];
  createdAt: string;
  updatedAt: string;
  deletedAt?: string | null;
  versions: AiPromptVersion[];
}

interface SurveyQuestion {
  id: string;
  type: "likert" | "text";
  text: string;
  min?: number;
  max?: number;
  required?: boolean;
}
interface Survey {
  id: number;
  title: string;
  description?: string;
  questions: SurveyQuestion[];
  isActive: boolean;
  createdAt: string;
}
interface SurveyResponseItem {
  id: number;
  surveyId: number;
  createdAt: string;
  anonymizedUser?: string;
  answers: { questionId: string; value: number | string }[];
}

// Mock data with enhanced variables and versions
const nowIso = () => new Date().toISOString();
const withInitialVersion = (p: any, idx: number): AiPromptTemplate => ({
  id: p.id ?? idx + 1,
  name: p.name,
  module: p.module,
  content: p.content,
  variables: p.variables ?? [],
  createdAt: p.createdAt ?? nowIso(),
  updatedAt: p.createdAt ?? nowIso(),
  deletedAt: null,
  versions: [
    {
      version: 1,
      name: p.name,
      module: p.module,
      content: p.content,
      variables: p.variables ?? [],
      createdAt: p.createdAt ?? nowIso(),
      createdBy: "admin",
    },
  ],
});

const seedPrompts = [
  {
    id: 1,
    name: "Prompt t·∫°o b√†i t·∫≠p to√°n",
    content:
      "H√£y t·∫°o m·ªôt b√†i t·∫≠p to√°n h·ªçc ph√π h·ª£p v·ªõi h·ªçc sinh l·ªõp {{grade}} v·ªÅ ch·ªß ƒë·ªÅ {{topic}}. B√†i t·∫≠p c·∫ßn c√≥ {{difficulty}} ƒë·ªô kh√≥ v√† bao g·ªìm {{questions}} c√¢u h·ªèi. ƒê·ªãnh d·∫°ng: {{format}}. Th·ªùi gian l√†m b√†i: {{duration}} ph√∫t.",
    module: "B√†i t·∫≠p" as AiFeatureModule,
    variables: [
      { name: "grade", type: "select", options: ["1", "2", "3", "4", "5"], description: "L·ªõp h·ªçc" },
      { name: "topic", type: "text", description: "Ch·ªß ƒë·ªÅ b√†i h·ªçc" },
      { name: "difficulty", type: "select", options: ["d·ªÖ", "trung b√¨nh", "kh√≥"], description: "ƒê·ªô kh√≥" },
      { name: "questions", type: "number", min: 1, max: 20, description: "S·ªë c√¢u h·ªèi" },
      { name: "format", type: "select", options: ["tr·∫Øc nghi·ªám", "t·ª± lu·∫≠n", "h·ªón h·ª£p"], description: "D·∫°ng b√†i t·∫≠p" },
      { name: "duration", type: "number", min: 5, max: 60, description: "Th·ªùi gian l√†m b√†i (ph√∫t)" },
    ],
    createdAt: "2024-01-15",
  },
  {
    id: 2,
    name: "Prompt sinh l·ªô tr√¨nh h·ªçc",
    content:
      "D·ª±a tr√™n m·ª•c ti√™u h·ªçc t·∫≠p '{{goal}}' trong th·ªùi gian {{duration}}, h√£y t·∫°o m·ªôt l·ªô tr√¨nh h·ªçc chi ti·∫øt cho h·ªçc sinh {{age_group}} c√≥ tr√¨nh ƒë·ªô {{level}}. M√¥n h·ªçc: {{subject}}. S·ªë bu·ªïi h·ªçc: {{sessions}} bu·ªïi. M·ªói bu·ªïi {{session_duration}} ph√∫t.",
    module: "L·ªô tr√¨nh" as AiFeatureModule,
    variables: [
      { name: "goal", type: "text", description: "M·ª•c ti√™u h·ªçc t·∫≠p" },
      { name: "duration", type: "select", options: ["1 tu·∫ßn", "2 tu·∫ßn", "1 th√°ng", "2 th√°ng", "3 th√°ng"], description: "Th·ªùi gian h·ªçc" },
      { name: "age_group", type: "select", options: ["5-7 tu·ªïi", "6-8 tu·ªïi", "7-9 tu·ªïi", "8-10 tu·ªïi"], description: "ƒê·ªô tu·ªïi" },
      { name: "level", type: "select", options: ["m·ªõi b·∫Øt ƒë·∫ßu", "c∆° b·∫£n", "trung b√¨nh", "n√¢ng cao"], description: "Tr√¨nh ƒë·ªô hi·ªán t·∫°i" },
      { name: "subject", type: "select", options: ["To√°n", "VƒÉn", "Anh"], description: "M√¥n h·ªçc" },
      { name: "sessions", type: "number", min: 3, max: 20, description: "S·ªë bu·ªïi h·ªçc" },
      { name: "session_duration", type: "number", min: 15, max: 60, description: "Th·ªùi l∆∞·ª£ng m·ªói bu·ªïi (ph√∫t)" },
    ],
    createdAt: "2024-01-20",
  },
  {
    id: 3,
    name: "Prompt chatbot h·ªó tr·ª£",
    content:
      "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán gi√∫p h·ªçc sinh ti·ªÉu h·ªçc {{age}}. H√£y tr·∫£ l·ªùi c√¢u h·ªèi '{{question}}' v·ªÅ m√¥n {{subject}} m·ªôt c√°ch {{tone}} v√† {{complexity}}. S·ª≠ d·ª•ng {{language}} ƒë·ªÉ tr·∫£ l·ªùi.",
    module: "Chatbot" as AiFeatureModule,
    variables: [
      { name: "age", type: "select", options: ["5-7 tu·ªïi", "6-8 tu·ªïi", "7-9 tu·ªïi", "8-10 tu·ªïi"], description: "ƒê·ªô tu·ªïi h·ªçc sinh" },
      { name: "question", type: "text", description: "C√¢u h·ªèi c·ªßa h·ªçc sinh" },
      { name: "subject", type: "select", options: ["To√°n", "VƒÉn", "Anh", "t·ªïng h·ª£p"], description: "M√¥n h·ªçc" },
      { name: "tone", type: "select", options: ["vui v·∫ª", "khuy·∫øn kh√≠ch", "t·ª± nhi√™n", "nƒÉng ƒë·ªông"], description: "Gi·ªçng ƒëi·ªáu" },
      { name: "complexity", type: "select", options: ["ƒë∆°n gi·∫£n", "d·ªÖ hi·ªÉu", "chi ti·∫øt h∆°n"], description: "ƒê·ªô ph·ª©c t·∫°p" },
      { name: "language", type: "select", options: ["ti·∫øng Vi·ªát", "ti·∫øng Anh", "song ng·ªØ"], description: "Ng√¥n ng·ªØ tr·∫£ l·ªùi" },
    ],
    createdAt: "2024-01-10",
  },
  {
    id: 4,
    name: "Prompt ch·∫•m b√†i t·ª± ƒë·ªông",
    content:
      "H√£y ch·∫•m b√†i l√†m c·ªßa h·ªçc sinh v·ªÅ m√¥n {{subject}}. B√†i l√†m: {{student_answer}}. ƒê√°p √°n ƒë√∫ng: {{correct_answer}}. Ti√™u ch√≠ ch·∫•m: {{criteria}}. H√£y ƒë∆∞a ra ƒëi·ªÉm s·ªë ({{max_score}} ƒëi·ªÉm), nh·∫≠n x√©t {{feedback_style}} v√† g·ª£i √Ω c·∫£i thi·ªán.",
    module: "Ch·∫•m b√†i" as AiFeatureModule,
    variables: [
      { name: "subject", type: "select", options: ["To√°n", "VƒÉn", "Anh"], description: "M√¥n h·ªçc" },
      { name: "student_answer", type: "textarea", description: "B√†i l√†m c·ªßa h·ªçc sinh" },
      { name: "correct_answer", type: "textarea", description: "ƒê√°p √°n ch√≠nh x√°c" },
      { name: "criteria", type: "textarea", description: "Ti√™u ch√≠ ch·∫•m ƒëi·ªÉm" },
      { name: "max_score", type: "number", min: 1, max: 100, description: "ƒêi·ªÉm t·ªëi ƒëa" },
      { name: "feedback_style", type: "select", options: ["khuy·∫øn kh√≠ch", "chi ti·∫øt", "t√≥m t·∫Øt", "x√¢y d·ª±ng"], description: "Ki·ªÉu ph·∫£n h·ªìi" },
    ],
    createdAt: "2024-01-25",
  },
].map(withInitialVersion);

const mockAILogs = [
  {
    id: 1,
    timestamp: "2024-01-28 14:30:25",
    user: "Nguy·ªÖn Minh ƒê·ª©c",
    module: "B√†i t·∫≠p",
    tokensUsed: 150,
    status: "Th√†nh c√¥ng",
    cost: "0.003$",
    details: "T·∫°o b√†i t·∫≠p to√°n l·ªõp 3 v·ªÅ ph√©p c·ªông v√† tr·ª´",
    conversation: null,
  },
  {
    id: 2,
    timestamp: "2024-01-28 14:25:12",
    user: "Tr·∫ßn Th·ªã Mai",
    module: "Chatbot",
    tokensUsed: 85,
    status: "Th√†nh c√¥ng",
    cost: "0.002$",
    details: "H·ªó tr·ª£ gi·∫£i b√†i t·∫≠p to√°n",
    conversation: [
      { role: "user", content: "Em kh√¥ng hi·ªÉu b√†i to√°n n√†y: 25 + 17 = ?", time: "14:25:12" },
      {
        role: "assistant",
        content:
          "Ch√†o em! C√¥ s·∫Ω gi√∫p em gi·∫£i b√†i to√°n n√†y nh√©. 25 + 17 ta t√≠nh nh∆∞ sau:\n\n25 + 17\n= 20 + 5 + 10 + 7\n= 20 + 10 + 5 + 7\n= 30 + 12\n= 42\n\nV·∫≠y 25 + 17 = 42. Em hi·ªÉu ch∆∞a?",
        time: "14:25:15",
      },
      { role: "user", content: "D·∫° em hi·ªÉu r·ªìi! C·∫£m ∆°n c√¥ ·∫°", time: "14:25:18" },
    ],
  },
  {
    id: 3,
    timestamp: "2024-01-28 14:20:45",
    user: "Admin AI",
    module: "L·ªô tr√¨nh",
    tokensUsed: 320,
    status: "L·ªói",
    cost: "0.000$",
    details: "T·∫°o l·ªô tr√¨nh h·ªçc to√°n cho h·ªçc sinh l·ªõp 2",
    conversation: null,
  },
  {
    id: 4,
    timestamp: "2024-01-28 14:15:33",
    user: "L√™ VƒÉn H√πng",
    module: "Chatbot",
    tokensUsed: 125,
    status: "Th√†nh c√¥ng",
    cost: "0.002$",
    details: "H·ªó tr·ª£ h·ªçc t·ª´ v·ª±ng ti·∫øng Anh",
    conversation: [
      { role: "user", content: "How do you say 'con ch√≥' in English?", time: "14:15:33" },
      {
        role: "assistant",
        content:
          "Hello! 'Con ch√≥' in English is 'dog' üêï\n\nHere are some examples:\n- This is a dog. (ƒê√¢y l√† m·ªôt con ch√≥)\n- I love dogs. (T√¥i y√™u nh·ªØng con ch√≥)\n- The dog is cute. (Con ch√≥ n√†y d·ªÖ th∆∞∆°ng)\n\nWould you like to learn more animal names?",
        time: "14:15:36",
      },
      { role: "user", content: "Yes! What about 'con m√®o'?", time: "14:15:40" },
      {
        role: "assistant",
        content:
          "Great! 'Con m√®o' in English is 'cat' üê±\n\nExamples:\n- I have a cat. (T√¥i c√≥ m·ªôt con m√®o)\n- The cat is sleeping. (Con m√®o ƒëang ng·ªß)\n- Cats are cute! (M√®o r·∫•t d·ªÖ th∆∞∆°ng!)",
        time: "14:15:42",
      },
    ],
  },
  {
    id: 5,
    timestamp: "2024-01-28 14:10:15",
    user: "Nguy·ªÖn Th·ªã Hoa",
    module: "Ch·∫•m b√†i",
    tokensUsed: 200,
    status: "Th√†nh c√¥ng",
    cost: "0.004$",
    details: "Ch·∫•m b√†i t·ª± lu·∫≠n m√¥n VƒÉn l·ªõp 4",
    conversation: null,
  },
];

function extractTemplateVars(text: string) {
  const re = /\{\{\s*([a-zA-Z_][\w]*)\s*\}\}/g;
  const names: string[] = [];
  let m: RegExpExecArray | null;
  while ((m = re.exec(text))) names.push(m[1]);
  return Array.from(new Set(names));
}

export default function AdminAIConfig() {
  const [apiConfig, setApiConfig] = useState({
    provider: "openai",
    apiKey: "sk-************************************",
    model: "gpt-4",
    temperature: [0.7],
    top_p: [1],
    maxTokens: 1000,
    frequency_penalty: [0],
    presence_penalty: [0],
    stop: "",
  });

  const [aiFeatures, setAiFeatures] = useState({
    autoGrading: true,
    pathGeneration: true,
    exerciseCreation: false,
    progressReporting: true,
  });

  const [prompts, setPrompts] = useState<AiPromptTemplate[]>(seedPrompts);
  const [isAddPromptDialogOpen, setIsAddPromptDialogOpen] = useState(false);
  const [showApiKey, setShowApiKey] = useState(false);
  const [newPrompt, setNewPrompt] = useState<{
    name: string;
    module: AiFeatureModule | "";
    content: string;
    variables: AiPromptVariable[];
  }>({ name: "", module: "", content: "", variables: [] });

  const [currentVariable, setCurrentVariable] = useState<AiPromptVariable>({
    name: "",
    type: "text",
    description: "",
    options: [],
    min: 0,
    max: 100,
  });

  const [isEditingPrompt, setIsEditingPrompt] = useState(false);
  const [editingPromptId, setEditingPromptId] = useState<number | null>(null);
  const [showVariableEditor, setShowVariableEditor] = useState(false);
  const [moduleFilter, setModuleFilter] = useState("T·∫•t c·∫£");
  const [statusFilter, setStatusFilter] = useState("T·∫•t c·∫£");
  const [selectedLog, setSelectedLog] = useState<any>(null);
  const [isLogDetailDialogOpen, setIsLogDetailDialogOpen] = useState(false);
  const [versionsDialogFor, setVersionsDialogFor] = useState<AiPromptTemplate | null>(null);

  // Survey state (UC-07.2)
  const [surveys, setSurveys] = useState<Survey[]>([
    {
      id: 1,
      title: "Kh·∫£o s√°t m·ª©c ƒë·ªô h√†i l√≤ng AI",
      description: "Kh·∫£o s√°t ng·∫Øn sau khi d√πng AI",
      isActive: true,
      createdAt: nowIso(),
      questions: [
        { id: "q1", type: "likert", text: "B·∫°n h√†i l√≤ng v·ªõi c√¢u tr·∫£ l·ªùi?", min: 1, max: 5, required: true },
        { id: "q2", type: "text", text: "G√≥p √Ω chi ti·∫øt", required: false },
      ],
    },
  ]);
  const [surveyResponses, setSurveyResponses] = useState<SurveyResponseItem[]>([]);
  const [surveyEditorOpen, setSurveyEditorOpen] = useState(false);
  const [editingSurveyId, setEditingSurveyId] = useState<number | null>(null);
  const [surveyDraft, setSurveyDraft] = useState<Survey>({
    id: 0,
    title: "",
    description: "",
    isActive: true,
    createdAt: nowIso(),
    questions: [],
  });

  // Autosave draft for prompt editor
  const autosaveTimer = useRef<NodeJS.Timeout | null>(null);
  useEffect(() => {
    if (!isAddPromptDialogOpen) return;
    if (autosaveTimer.current) clearTimeout(autosaveTimer.current);
    autosaveTimer.current = setTimeout(() => {
      localStorage.setItem("admin_ai_prompt_draft", JSON.stringify(newPrompt));
    }, 500);
    return () => {
      if (autosaveTimer.current) clearTimeout(autosaveTimer.current);
    };
  }, [newPrompt, isAddPromptDialogOpen]);

  useEffect(() => {
    if (isAddPromptDialogOpen) {
      const saved = localStorage.getItem("admin_ai_prompt_draft");
      if (saved) {
        try {
          const parsed = JSON.parse(saved);
          if (parsed && typeof parsed === "object") {
            setNewPrompt(parsed);
          }
        } catch {}
      }
    }
  }, [isAddPromptDialogOpen]);

  const handleSaveApiConfig = () => {
    const temp = apiConfig.temperature[0];
    const topP = apiConfig.top_p[0];
    const freq = apiConfig.frequency_penalty[0];
    const pres = apiConfig.presence_penalty[0];
    if (temp < 0 || temp > 2) return alert("Temperature ph·∫£i trong [0,2]");
    if (topP < 0 || topP > 1) return alert("top_p ph·∫£i trong [0,1]");
    if (freq < -2 || freq > 2) return alert("frequency_penalty ph·∫£i trong [-2,2]");
    if (pres < -2 || pres > 2) return alert("presence_penalty ph·∫£i trong [-2,2]");
    if (apiConfig.maxTokens < 1) return alert("max_tokens ph·∫£i > 0");
    alert("C·∫•u h√¨nh API ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
  };

  function validatePromptDraft(draft: typeof newPrompt, excludeId?: number): string | null {
    if (!draft.name.trim() || !draft.module || !draft.content.trim())
      return "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n, module v√† n·ªôi dung";
    const nameClash = prompts.some((p) => p.name.trim() === draft.name.trim() && p.id !== excludeId);
    if (nameClash) return "T√™n prompt ph·∫£i l√† duy nh·∫•t (BR-U7.1-1)";
    const varNames = new Set(draft.variables.map((v) => v.name));
    if (varNames.size !== draft.variables.length) return "T√™n bi·∫øn tr√πng l·∫∑p";
    const invalidName = [...varNames].find((n) => !/^[a-zA-Z_][\w]*$/.test(n));
    if (invalidName) return `T√™n bi·∫øn kh√¥ng h·ª£p l·ªá: ${invalidName}`;
    const used = extractTemplateVars(draft.content);
    const missing = used.filter((u) => !varNames.has(u));
    if (missing.length) return `Thi·∫øu ƒë·ªãnh nghƒ©a bi·∫øn: ${missing.join(", ")}`;
    return null;
  }

  const handleAddPrompt = () => {
    const err = validatePromptDraft(newPrompt, isEditingPrompt ? editingPromptId ?? undefined : undefined);
    if (err) return alert(err);

    if (isEditingPrompt && editingPromptId != null) {
      const idx = prompts.findIndex((p) => p.id === editingPromptId);
      if (idx === -1) return;
      const prev = prompts[idx];
      const nextVersionNum = (prev.versions[prev.versions.length - 1]?.version ?? 0) + 1;
      const updated: AiPromptTemplate = {
        ...prev,
        name: newPrompt.name,
        module: newPrompt.module as AiFeatureModule,
        content: newPrompt.content,
        variables: newPrompt.variables,
        updatedAt: nowIso(),
        versions: [
          ...prev.versions,
          {
            version: nextVersionNum,
            name: newPrompt.name,
            module: newPrompt.module as AiFeatureModule,
            content: newPrompt.content,
            variables: newPrompt.variables,
            createdAt: nowIso(),
            createdBy: "admin",
          },
        ],
      };
      const copy = [...prompts];
      copy[idx] = updated;
      setPrompts(copy);
      setIsEditingPrompt(false);
      setEditingPromptId(null);
    } else {
      const newId = Math.max(0, ...prompts.map((p) => p.id)) + 1;
      const created: AiPromptTemplate = {
        id: newId,
        name: newPrompt.name,
        module: newPrompt.module as AiFeatureModule,
        content: newPrompt.content,
        variables: newPrompt.variables,
        createdAt: nowIso(),
        updatedAt: nowIso(),
        deletedAt: null,
        versions: [
          {
            version: 1,
            name: newPrompt.name,
            module: newPrompt.module as AiFeatureModule,
            content: newPrompt.content,
            variables: newPrompt.variables,
            createdAt: nowIso(),
            createdBy: "admin",
          },
        ],
      };
      setPrompts([...prompts, created]);
    }
    setNewPrompt({ name: "", module: "", content: "", variables: [] });
    setIsAddPromptDialogOpen(false);
  };

  const handleEditPrompt = (prompt: AiPromptTemplate) => {
    setNewPrompt({
      name: prompt.name,
      module: prompt.module,
      content: prompt.content,
      variables: prompt.variables || [],
    });
    setIsEditingPrompt(true);
    setEditingPromptId(prompt.id);
    setIsAddPromptDialogOpen(true);
  };

  const handleCopyPrompt = (prompt: AiPromptTemplate) => {
    let base = `${prompt.name} (Copy)`;
    let candidate = base;
    let i = 1;
    const names = new Set(prompts.map((p) => p.name));
    while (names.has(candidate)) {
      i += 1;
      candidate = `${base} ${i}`;
    }
    const newId = Math.max(0, ...prompts.map((p) => p.id)) + 1;
    const copied: AiPromptTemplate = {
      ...prompt,
      id: newId,
      name: candidate,
      createdAt: nowIso(),
      updatedAt: nowIso(),
      versions: [
        ...prompt.versions,
        {
          version: (prompt.versions[prompt.versions.length - 1]?.version ?? 0) + 1,
          name: candidate,
          module: prompt.module,
          content: prompt.content,
          variables: prompt.variables,
          createdAt: nowIso(),
          createdBy: "admin",
        },
      ],
    };
    setPrompts([...prompts, copied]);
  };

  const handleRemoveVariable = (index: number) => {
    const updatedVariables = newPrompt.variables.filter((_, i) => i !== index);
    setNewPrompt({ ...newPrompt, variables: updatedVariables });
  };

  const insertVariableIntoPrompt = (variableName: string) => {
    const textarea = document.getElementById("promptContent") as HTMLTextAreaElement | null;
    const cursorPosition = textarea?.selectionStart ?? newPrompt.content.length;
    const beforeCursor = newPrompt.content.slice(0, cursorPosition);
    const afterCursor = newPrompt.content.slice(cursorPosition);
    const newContent = beforeCursor + `{{${variableName}}}` + afterCursor;
    setNewPrompt({ ...newPrompt, content: newContent });
    textarea?.focus();
  };

  const handleDeletePrompt = (id: number) => {
    setPrompts(prompts.filter((prompt) => prompt.id !== id));
  };

  const handleFeatureToggle = (feature: string, enabled: boolean) => {
    setAiFeatures((prev) => ({ ...prev, [feature]: enabled }));
  };

  const exportLogs = () => {
    alert("ƒêang xu·∫•t b√°o c√°o CSV...");
  };

  const showLogDetail = (log: any) => {
    setSelectedLog(log);
    setIsLogDetailDialogOpen(true);
  };

  const getModuleColor = (module: string) => {
    switch (module) {
      case "B√†i t·∫≠p":
        return "bg-blue-100 text-blue-800";
      case "L·ªô tr√¨nh":
        return "bg-green-100 text-green-800";
      case "Chatbot":
        return "bg-purple-100 text-purple-800";
      case "B√°o c√°o":
        return "bg-orange-100 text-orange-800";
      case "Ch·∫•m b√†i":
        return "bg-rose-100 text-rose-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Th√†nh c√¥ng":
        return "bg-green-100 text-green-800";
      case "L·ªói":
        return "bg-red-100 text-red-800";
      case "ƒêang x·ª≠ l√Ω":
        return "bg-yellow-100 text-yellow-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const promptPreviewHtml = useMemo(() => {
    const esc = (s: string) => s.replace(/[&<>]/g, (c) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;" } as any)[c]);
    const highlighted = newPrompt.content.replace(/\{\{\s*([a-zA-Z_][\w]*)\s*\}\}/g, (_m, p1) => `<span class=\"px-1 rounded bg-yellow-100 text-yellow-900 border border-yellow-300\">{{${p1}}}</span>`);
    return esc("") + highlighted;
  }, [newPrompt.content]);

  // Survey helpers
  const activeSurveyCount = surveys.filter((s) => s.isActive).length;
  const totalQuestions = surveys.reduce((a, s) => a + s.questions.length, 0);
  const avgLikert = useMemo(() => {
    const likertValues: number[] = [];
    for (const r of surveyResponses) {
      for (const ans of r.answers) if (typeof ans.value === "number") likertValues.push(ans.value);
    }
    if (!likertValues.length) return 0;
    return Math.round((likertValues.reduce((a, b) => a + b, 0) / likertValues.length) * 10) / 10;
  }, [surveyResponses]);

  const openSurveyEditor = (survey?: Survey) => {
    if (survey) {
      setEditingSurveyId(survey.id);
      setSurveyDraft(JSON.parse(JSON.stringify(survey)));
    } else {
      setEditingSurveyId(null);
      setSurveyDraft({ id: 0, title: "", description: "", isActive: true, createdAt: nowIso(), questions: [] });
    }
    setSurveyEditorOpen(true);
  };

  const saveSurveyDraft = () => {
    if (!surveyDraft.title.trim()) return alert("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ kh·∫£o s√°t");
    if (surveyDraft.questions.length === 0) return alert("Kh·∫£o s√°t c·∫ßn √≠t nh·∫•t 1 c√¢u h·ªèi");
    if (surveyDraft.questions.length > 5) return alert("Kh·∫£o s√°t t·ªëi ƒëa 5 c√¢u h·ªèi (BR-U7.2-1)");
    const invalid = surveyDraft.questions.find((q) => !q.text.trim());
    if (invalid) return alert("Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi");
    if (editingSurveyId) {
      setSurveys((prev) => prev.map((s) => (s.id === editingSurveyId ? { ...surveyDraft, id: editingSurveyId } : s)));
    } else {
      const newId = Math.max(0, ...surveys.map((s) => s.id)) + 1;
      setSurveys([...surveys, { ...surveyDraft, id: newId, createdAt: nowIso() }]);
    }
    setSurveyEditorOpen(false);
  };

  const deleteSurvey = (id: number) => setSurveys((prev) => prev.filter((s) => s.id !== id));

  const simulateSubmitResponse = (survey: Survey) => {
    const likertQs = survey.questions.filter((q) => q.type === "likert") as SurveyQuestion[];
    const answers = survey.questions.map((q) => ({
      questionId: q.id,
      value: q.type === "likert" ? Math.floor(((q.min ?? 1) + (q.max ?? 5)) / 2) : "√ù ki·∫øn hay!",
    }));
    const item: SurveyResponseItem = {
      id: Math.max(0, ...surveyResponses.map((r) => r.id)) + 1,
      surveyId: survey.id,
      createdAt: nowIso(),
      anonymizedUser: `user_${Math.random().toString(36).slice(2, 8)}`,
      answers,
    };
    setSurveyResponses([item, ...surveyResponses]);
    alert(`ƒê√£ ghi nh·∫≠n ${likertQs.length} c√¢u likert, ${survey.questions.length - likertQs.length} c√¢u t·ª± do`);
  };

  return (
    <AdminLayout>
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
              <Brain className="h-8 w-8 text-blue-600" />
              C·∫•u h√¨nh AI (Ch·ªâ Qu·∫£n tr·ªã vi√™n)
            </h1>
            <p className="text-gray-600 mt-1">Qu·∫£n l√Ω c·∫•u h√¨nh v√† tham s·ªë c·ªßa h·ªá th·ªëng AI - Ch·ªâ c√≥ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ quy·ªÅn ƒëi·ªÅu ch·ªânh</p>
          </div>
        </div>

        <Tabs defaultValue="api-config" className="space-y-6">
          <TabsList className="grid w-full grid-cols-5 bg-blue-50">
            <TabsTrigger value="api-config" className="flex items-center gap-2">
              <Cpu className="h-4 w-4" />
              C·∫•u h√¨nh API
            </TabsTrigger>
            <TabsTrigger value="prompts" className="flex items-center gap-2">
              <MessageSquare className="h-4 w-4" />
              Prompt m·∫´u
            </TabsTrigger>
            <TabsTrigger value="features" className="flex items-center gap-2">
              <Brain className="h-4 w-4" />
              T√≠nh nƒÉng AI
            </TabsTrigger>
            <TabsTrigger value="surveys" className="flex items-center gap-2">
              <ListChecks className="h-4 w-4" />
              Kh·∫£o s√°t
            </TabsTrigger>
            <TabsTrigger value="logs" className="flex items-center gap-2">
              <Activity className="h-4 w-4" />
              Log AI
            </TabsTrigger>
          </TabsList>

          {/* API Configuration Tab (UC-07.3) */}
          <TabsContent value="api-config">
            <Card className="border-blue-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-blue-700">
                  <Settings className="h-5 w-5" />
                  C·∫•u h√¨nh API & Tham s·ªë Model
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="provider">Nh√† cung c·∫•p</Label>
                      <Select
                        value={apiConfig.provider}
                        onValueChange={(value) => setApiConfig({ ...apiConfig, provider: value })}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="openai">OpenAI</SelectItem>
                          <SelectItem value="anthropic">Anthropic</SelectItem>
                          <SelectItem value="other">Kh√°c</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="apiKey">API Key</Label>
                      <div className="flex gap-2">
                        <Input
                          id="apiKey"
                          type={showApiKey ? "text" : "password"}
                          value={apiConfig.apiKey}
                          onChange={(e) => setApiConfig({ ...apiConfig, apiKey: e.target.value })}
                          className="flex-1"
                        />
                        <Button variant="outline" size="sm" onClick={() => setShowApiKey(!showApiKey)}>
                          {showApiKey ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                        </Button>
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="model">Model AI</Label>
                      <Select value={apiConfig.model} onValueChange={(value) => setApiConfig({ ...apiConfig, model: value })}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="gpt-4">GPT-4</SelectItem>
                          <SelectItem value="gpt-4-turbo">GPT-4 Turbo</SelectItem>
                          <SelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo</SelectItem>
                          <SelectItem value="claude-3">Claude 3</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="temperature">Temperature: {apiConfig.temperature[0]}</Label>
                      <Slider id="temperature" min={0} max={2} step={0.1} value={apiConfig.temperature} onValueChange={(value) => setApiConfig({ ...apiConfig, temperature: value })} className="mt-2" />
                      <div className="flex justify-between text-xs text-gray-500 mt-1">
                        <span>Ch√≠nh x√°c (0)</span>
                        <span>S√°ng t·∫°o (2)</span>
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="top_p">top_p: {apiConfig.top_p[0]}</Label>
                      <Slider id="top_p" min={0} max={1} step={0.05} value={apiConfig.top_p} onValueChange={(value) => setApiConfig({ ...apiConfig, top_p: value })} className="mt-2" />
                    </div>

                    <div>
                      <Label htmlFor="maxTokens">Max Tokens</Label>
                      <Input id="maxTokens" type="number" value={apiConfig.maxTokens} onChange={(e) => setApiConfig({ ...apiConfig, maxTokens: parseInt(e.target.value) })} min={1} max={400000} />
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label>frequency_penalty: {apiConfig.frequency_penalty[0]}</Label>
                    <Slider min={-2} max={2} step={0.1} value={apiConfig.frequency_penalty} onValueChange={(v) => setApiConfig({ ...apiConfig, frequency_penalty: v })} className="mt-2" />
                  </div>
                  <div>
                    <Label>presence_penalty: {apiConfig.presence_penalty[0]}</Label>
                    <Slider min={-2} max={2} step={0.1} value={apiConfig.presence_penalty} onValueChange={(v) => setApiConfig({ ...apiConfig, presence_penalty: v })} className="mt-2" />
                  </div>
                  <div>
                    <Label>Stop sequences (ph√¢n t√°ch d·∫•u ph·∫©y)</Label>
                    <Input value={apiConfig.stop} onChange={(e) => setApiConfig({ ...apiConfig, stop: e.target.value })} placeholder="VD: ###, END" />
                  </div>
                </div>

                <div className="flex justify-end">
                  <Button onClick={handleSaveApiConfig} className="bg-blue-600 hover:bg-blue-700">
                    <Save className="h-4 w-4 mr-2" />
                    L∆∞u c·∫•u h√¨nh
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Prompts Management Tab (UC-07.1) */}
          <TabsContent value="prompts">
            <Card className="border-green-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2 text-green-700">
                    <MessageSquare className="h-5 w-5" />
                    Qu·∫£n l√Ω Prompt m·∫´u
                  </CardTitle>
                  <Dialog open={isAddPromptDialogOpen} onOpenChange={setIsAddPromptDialogOpen}>
                    <DialogTrigger asChild>
                      <Button className="bg-green-600 hover:bg-green-700">
                        <Plus className="h-4 w-4 mr-2" />
                        Th√™m prompt
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="sm:max-w-[900px] max-h-[90vh] overflow-y-auto">
                      <DialogHeader>
                        <DialogTitle>{isEditingPrompt ? "Ch·ªânh s·ª≠a" : "Th√™m"} Prompt (Qu·∫£n tr·ªã vi√™n)</DialogTitle>
                        <DialogDescription>
                          T·∫°o prompt m·∫´u v·ªõi bi·∫øn ƒë·ªông cho c√°c module AI - L∆∞u s·∫Ω t·∫°o version m·ªõi (BR-U7.1-2)
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-6">
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="promptName">T√™n prompt</Label>
                            <Input id="promptName" value={newPrompt.name} onChange={(e) => setNewPrompt({ ...newPrompt, name: e.target.value })} placeholder="Nh·∫≠p t√™n prompt" />
                          </div>
                          <div>
                            <Label htmlFor="promptModule">Module √°p d·ª•ng</Label>
                            <Select value={newPrompt.module} onValueChange={(value) => setNewPrompt({ ...newPrompt, module: value as any })}>
                              <SelectTrigger>
                                <SelectValue placeholder="Ch·ªçn module" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="B√†i t·∫≠p">B√†i t·∫≠p</SelectItem>
                                <SelectItem value="L·ªô tr√¨nh">L·ªô tr√¨nh</SelectItem>
                                <SelectItem value="Chatbot">Chatbot</SelectItem>
                                <SelectItem value="Ch·∫•m b√†i">Ch·∫•m b√†i</SelectItem>
                                <SelectItem value="B√°o c√°o">B√°o c√°o</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>

                        <div className="border border-blue-200 rounded-lg p-4">
                          <div className="flex items-center justify-between mb-4">
                            <Label className="text-lg font-semibold text-blue-700">Bi·∫øn ƒë·ªông (Variables)</Label>
                            <Button type="button" variant="outline" size="sm" onClick={() => setShowVariableEditor(!showVariableEditor)} className="border-blue-300 text-blue-600">
                              <Plus className="h-4 w-4 mr-1" />
                              Th√™m bi·∫øn
                            </Button>
                          </div>

                          {newPrompt.variables.length > 0 && (
                            <div className="space-y-2 mb-4">
                              {newPrompt.variables.map((variable, index) => (
                                <div key={index} className="flex items-center justify-between p-3 bg-blue-50 rounded border border-blue-200">
                                  <div className="flex-1">
                                    <div className="font-medium text-blue-900">{`{{${variable.name}}}`}</div>
                                    <div className="text-sm text-blue-600">{variable.description}</div>
                                    <div className="text-xs text-blue-500">Lo·∫°i: {variable.type}</div>
                                  </div>
                                  <div className="flex gap-2">
                                    <Button type="button" variant="ghost" size="sm" onClick={() => insertVariableIntoPrompt(variable.name)} className="text-blue-600 hover:bg-blue-100">
                                      Ch√®n
                                    </Button>
                                    <Button type="button" variant="ghost" size="sm" onClick={() => handleRemoveVariable(index)} className="text-red-600 hover:bg-red-100">
                                      <Trash2 className="h-4 w-4" />
                                    </Button>
                                  </div>
                                </div>
                              ))}
                            </div>
                          )}

                          {showVariableEditor && (
                            <div className="border-t border-blue-200 pt-4 space-y-4">
                              <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <Label>T√™n bi·∫øn</Label>
                                  <Input value={currentVariable.name} onChange={(e) => setCurrentVariable({ ...currentVariable, name: e.target.value })} placeholder="VD: grade, topic, difficulty" />
                                </div>
                                <div>
                                  <Label>Lo·∫°i d·ªØ li·ªáu</Label>
                                  <Select value={currentVariable.type} onValueChange={(value) => setCurrentVariable({ ...currentVariable, type: value as VariableType })}>
                                    <SelectTrigger>
                                      <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                      <SelectItem value="text">VƒÉn b·∫£n</SelectItem>
                                      <SelectItem value="textarea">VƒÉn b·∫£n d√†i</SelectItem>
                                      <SelectItem value="number">S·ªë</SelectItem>
                                      <SelectItem value="select">L·ª±a ch·ªçn</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </div>
                              </div>

                              <div>
                                <Label>M√¥ t·∫£</Label>
                                <Input value={currentVariable.description} onChange={(e) => setCurrentVariable({ ...currentVariable, description: e.target.value })} placeholder="M√¥ t·∫£ m·ª•c ƒë√≠ch c·ªßa bi·∫øn" />
                              </div>

                              {currentVariable.type === "select" && (
                                <div>
                                  <Label>C√°c l·ª±a ch·ªçn (c√°ch nhau b·∫±ng d·∫•u ph·∫©y)</Label>
                                  <Input
                                    value={Array.isArray(currentVariable.options) ? currentVariable.options.join(", ") : (currentVariable.options as any)}
                                    onChange={(e) => setCurrentVariable({ ...currentVariable, options: (e.target.value || "").split(",").map((s) => s.trim()).filter(Boolean) })}
                                    placeholder="VD: d·ªÖ, trung b√¨nh, kh√≥"
                                  />
                                </div>
                              )}

                              {currentVariable.type === "number" && (
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label>Gi√° tr·ªã t·ªëi thi·ªÉu</Label>
                                    <Input type="number" value={currentVariable.min ?? 0} onChange={(e) => setCurrentVariable({ ...currentVariable, min: parseInt(e.target.value) })} />
                                  </div>
                                  <div>
                                    <Label>Gi√° tr·ªã t·ªëi ƒëa</Label>
                                    <Input type="number" value={currentVariable.max ?? 100} onChange={(e) => setCurrentVariable({ ...currentVariable, max: parseInt(e.target.value) })} />
                                  </div>
                                </div>
                              )}

                              <div className="flex gap-2">
                                <Button
                                  type="button"
                                  onClick={() => {
                                    if (!currentVariable.name.trim()) return alert("Vui l√≤ng nh·∫≠p t√™n bi·∫øn");
                                    if (!currentVariable.description?.trim()) return alert("Vui l√≤ng nh·∫≠p m√¥ t·∫£ bi·∫øn");
                                    if (!/^[a-zA-Z_][\w]*$/.test(currentVariable.name)) return alert("T√™n bi·∫øn ch·ªâ g·ªìm ch·ªØ, s·ªë, _ v√† kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng s·ªë");
                                    setNewPrompt({ ...newPrompt, variables: [...newPrompt.variables, { ...currentVariable }] });
                                    setCurrentVariable({ name: "", type: "text", description: "", options: [], min: 0, max: 100 });
                                    setShowVariableEditor(false);
                                  }}
                                  size="sm"
                                  className="bg-blue-600 hover:bg-blue-700"
                                >
                                  L∆∞u bi·∫øn
                                </Button>
                                <Button type="button" variant="outline" onClick={() => setShowVariableEditor(false)} size="sm">
                                  H·ªßy
                                </Button>
                              </div>
                            </div>
                          )}

                          <div className="text-sm text-blue-600 bg-blue-50 p-3 rounded">
                            <strong>üí° H∆∞·ªõng d·∫´n:</strong> S·ª≠ d·ª•ng c√∫ ph√°p {"{{t√™n_bi·∫øn}}"} trong n·ªôi dung prompt. VD: {"{{grade}}"}, {"{{topic}}"}
                          </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="promptContent">N·ªôi dung prompt</Label>
                            <Textarea
                              id="promptContent"
                              value={newPrompt.content}
                              onChange={(e) => setNewPrompt({ ...newPrompt, content: e.target.value })}
                              placeholder={`Nh·∫≠p n·ªôi dung prompt. S·ª≠ d·ª•ng {{t√™n_bi·∫øn}} ƒë·ªÉ ch√®n bi·∫øn ƒë·ªông...`}
                              rows={10}
                              className="font-mono text-sm"
                            />
                          </div>
                          <div>
                            <Label>Xem tr∆∞·ªõc & highlight bi·∫øn</Label>
                            <div className="mt-2 p-3 bg-gray-50 border rounded text-sm font-mono leading-6" dangerouslySetInnerHTML={{ __html: promptPreviewHtml }} />
                          </div>
                        </div>
                      </div>
                      <DialogFooter>
                        <div className="flex gap-2">
                          <Button
                            variant="outline"
                            onClick={() => {
                              setIsAddPromptDialogOpen(false);
                              setIsEditingPrompt(false);
                              setEditingPromptId(null);
                              setNewPrompt({ name: "", module: "", content: "", variables: [] });
                            }}
                          >
                            H·ªßy
                          </Button>
                          <Button onClick={handleAddPrompt} className="bg-green-600 hover:bg-green-700">
                            {isEditingPrompt ? "C·∫≠p nh·∫≠t (t·∫°o version)" : "L∆∞u Prompt"}
                          </Button>
                        </div>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                </div>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>ID</TableHead>
                      <TableHead>T√™n prompt</TableHead>
                      <TableHead>N·ªôi dung</TableHead>
                      <TableHead>Bi·∫øn ƒë·ªông</TableHead>
                      <TableHead>Module</TableHead>
                      <TableHead>Ng√†y t·∫°o</TableHead>
                      <TableHead className="text-center">H√†nh ƒë·ªông</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {prompts.map((prompt) => (
                      <TableRow key={prompt.id}>
                        <TableCell className="font-medium">{prompt.id}</TableCell>
                        <TableCell className="font-medium">{prompt.name}</TableCell>
                        <TableCell>
                          <div className="max-w-xs truncate font-mono text-sm" title={prompt.content}>
                            {prompt.content}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-wrap gap-1 max-w-xs">
                            {prompt.variables && prompt.variables.length > 0 ? (
                              prompt.variables.map((variable, idx) => (
                                <Badge key={idx} variant="outline" className="text-xs">{`{{${variable.name}}}`}</Badge>
                              ))
                            ) : (
                              <span className="text-gray-400 text-xs italic">Kh√¥ng c√≥ bi·∫øn</span>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={getModuleColor(prompt.module)}>{prompt.module}</Badge>
                        </TableCell>
                        <TableCell>{prompt.createdAt}</TableCell>
                        <TableCell>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" className="h-8 w-8 p-0">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem onClick={() => handleEditPrompt(prompt)}>
                                <Edit className="mr-2 h-4 w-4" />
                                Ch·ªânh s·ª≠a
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleCopyPrompt(prompt)}>
                                <Copy className="mr-2 h-4 w-4" />
                                Sao ch√©p
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => setVersionsDialogFor(prompt)}>
                                <History className="mr-2 h-4 w-4" />
                                Phi√™n b·∫£n
                              </DropdownMenuItem>
                              <DropdownMenuItem className="text-red-600" onClick={() => handleDeletePrompt(prompt.id)}>
                                <Trash2 className="mr-2 h-4 w-4" />
                                X√≥a
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>

                {/* Versions Dialog */}
                <Dialog open={!!versionsDialogFor} onOpenChange={(o) => !o && setVersionsDialogFor(null)}>
                  <DialogContent className="max-w-2xl">
                    <DialogHeader>
                      <DialogTitle className="flex items-center gap-2">
                        <History className="h-5 w-5" /> L·ªãch s·ª≠ phi√™n b·∫£n: {versionsDialogFor?.name}
                      </DialogTitle>
                      <DialogDescription>
                        BR-U7.1-2: H·ªá th·ªëng l∆∞u phi√™n b·∫£n ƒë·ªÉ rollback khi c·∫ßn
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-3 max-h-[60vh] overflow-y-auto">
                      {versionsDialogFor?.versions.map((v) => (
                        <div key={v.version} className="p-3 border rounded bg-gray-50">
                          <div className="flex items-center justify-between">
                            <div className="text-sm font-medium">Version {v.version} ‚Ä¢ {new Date(v.createdAt).toLocaleString("vi-VN")}</div>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => {
                                if (!versionsDialogFor) return;
                                const idx = prompts.findIndex((p) => p.id === versionsDialogFor.id);
                                if (idx === -1) return;
                                const base = prompts[idx];
                                const nextNum = (base.versions[base.versions.length - 1]?.version ?? 0) + 1;
                                const rolled: AiPromptTemplate = {
                                  ...base,
                                  content: v.content,
                                  variables: v.variables,
                                  name: v.name,
                                  updatedAt: nowIso(),
                                  versions: [
                                    ...base.versions,
                                    {
                                      version: nextNum,
                                      name: v.name,
                                      module: v.module,
                                      content: v.content,
                                      variables: v.variables,
                                      createdAt: nowIso(),
                                      createdBy: "admin",
                                    },
                                  ],
                                };
                                const copy = [...prompts];
                                copy[idx] = rolled;
                                setPrompts(copy);
                                alert("ƒê√£ rollback v√† t·∫°o phi√™n b·∫£n m·ªõi t·ª´ b·∫£n c≈©");
                              }}
                            >
                              <Undo2 className="h-4 w-4 mr-1" /> Rollback
                            </Button>
                          </div>
                          <div className="mt-2 text-xs text-gray-700 font-mono whitespace-pre-wrap">{v.content}</div>
                          <div className="mt-2 flex gap-1 flex-wrap">
                            {v.variables.map((vv) => (
                              <Badge key={vv.name} variant="outline" className="text-[10px]">{`{{${vv.name}}}`}</Badge>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                    <DialogFooter>
                      <Button variant="outline" onClick={() => setVersionsDialogFor(null)}>ƒê√≥ng</Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Features Tab */}
          <TabsContent value="features">
            <Card className="border-purple-200">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-purple-700">
                  <Brain className="h-5 w-5" />
                  C·∫•u h√¨nh T√≠nh nƒÉng AI
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center">
                          <Settings className="h-5 w-5 text-purple-600" />
                        </div>
                        <div>
                          <h3 className="font-medium">AI ch·∫•m b√†i (Qu·∫£n tr·ªã vi√™n)</h3>
                          <p className="text-sm text-gray-600">
                            T·ª± ƒë·ªông ch·∫•m ƒëi·ªÉm - C·∫•u h√¨nh prompt v·ªõi bi·∫øn {"{{student_answer}}"}, {"{{correct_answer}}"}, {"{{criteria}}"}
                          </p>
                        </div>
                      </div>
                      <Switch checked={aiFeatures.autoGrading} onCheckedChange={(checked) => handleFeatureToggle("autoGrading", checked)} />
                    </div>

                    <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center">
                          <FileText className="h-5 w-5 text-green-600" />
                        </div>
                        <div>
                          <h3 className="font-medium">AI sinh l·ªô tr√¨nh (Qu·∫£n tr·ªã vi√™n)</h3>
                          <p className="text-sm text-gray-600">
                            T·∫°o l·ªô tr√¨nh c√° nh√¢n - S·ª≠ d·ª•ng bi·∫øn {"{{goal}}"}, {"{{duration}}"}, {"{{level}}"}, {"{{subject}}"}
                          </p>
                        </div>
                      </div>
                      <Switch checked={aiFeatures.pathGeneration} onCheckedChange={(checked) => handleFeatureToggle("pathGeneration", checked)} />
                    </div>

                    <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                          <Edit className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h3 className="font-medium">AI t·∫°o b√†i t·∫≠p (Qu·∫£n tr·ªã vi√™n)</h3>
                          <p className="text-sm text-gray-600">
                            Sinh b√†i t·∫≠p ƒë·ªông - ƒêi·ªÅu ch·ªânh bi·∫øn {"{{grade}}"}, {"{{topic}}"}, {"{{difficulty}}"}, {"{{questions}}"}
                          </p>
                        </div>
                      </div>
                      <Switch checked={aiFeatures.exerciseCreation} onCheckedChange={(checked) => handleFeatureToggle("exerciseCreation", checked)} />
                    </div>

                    <div className="flex items-center justify-between p-4 border border-purple-200 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="h-10 w-10 rounded-full bg-orange-100 flex items-center justify-center">
                          <Activity className="h-5 w-5 text-orange-600" />
                        </div>
                        <div>
                          <h3 className="font-medium">AI b√°o c√°o ti·∫øn ƒë·ªô (Qu·∫£n tr·ªã vi√™n)</h3>
                          <p className="text-sm text-gray-600">
                            Ph√¢n t√≠ch th√¥ng minh - T√πy ch·ªânh bi·∫øn {"{{time_period}}"}, {"{{metrics}}"}, {"{{student_group}}"}
                          </p>
                        </div>
                      </div>
                      <Switch checked={aiFeatures.progressReporting} onCheckedChange={(checked) => handleFeatureToggle("progressReporting", checked)} />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Surveys Tab (UC-07.2) */}
          <TabsContent value="surveys">
            <Card className="border-sky-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2 text-sky-700">
                    <ListChecks className="h-5 w-5" />
                    Kh·∫£o s√°t ng∆∞·ªùi d√πng (‚â§ 5 c√¢u h·ªèi)
                  </CardTitle>
                  <div className="flex gap-2">
                    <Button onClick={() => openSurveyEditor()} className="bg-sky-600 hover:bg-sky-700">
                      <Plus className="h-4 w-4 mr-1" /> T·∫°o kh·∫£o s√°t
                    </Button>
                    <Button variant="outline" onClick={() => alert("Xu·∫•t CSV ph·∫£n h·ªìi (m√¥ ph·ªèng)")}> 
                      <Download className="h-4 w-4 mr-1" /> Xu·∫•t CSV 
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                  <div className="bg-sky-50 p-4 rounded border border-sky-200">
                    <div className="text-2xl font-bold text-sky-700">{surveys.length}</div>
                    <div className="text-sm text-sky-700">Kh·∫£o s√°t</div>
                  </div>
                  <div className="bg-green-50 p-4 rounded border border-green-200">
                    <div className="text-2xl font-bold text-green-700">{activeSurveyCount}</div>
                    <div className="text-sm text-green-700">ƒêang k√≠ch ho·∫°t</div>
                  </div>
                  <div className="bg-orange-50 p-4 rounded border border-orange-200">
                    <div className="text-2xl font-bold text-orange-700">{totalQuestions}</div>
                    <div className="text-sm text-orange-700">T·ªïng c√¢u h·ªèi</div>
                  </div>
                  <div className="bg-purple-50 p-4 rounded border border-purple-200">
                    <div className="text-2xl font-bold text-purple-700">{avgLikert}</div>
                    <div className="text-sm text-purple-700">ƒêi·ªÉm h√†i l√≤ng TB</div>
                  </div>
                </div>

                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>ID</TableHead>
                      <TableHead>Ti√™u ƒë·ªÅ</TableHead>
                      <TableHead>Tr·∫°ng th√°i</TableHead>
                      <TableHead>C√¢u h·ªèi</TableHead>
                      <TableHead>Ng√†y t·∫°o</TableHead>
                      <TableHead className="text-center">H√†nh ƒë·ªông</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {surveys.map((s) => (
                      <TableRow key={s.id}>
                        <TableCell>{s.id}</TableCell>
                        <TableCell className="font-medium">{s.title}</TableCell>
                        <TableCell>
                          <Badge className={s.isActive ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800"}>
                            {s.isActive ? "ƒêang b·∫≠t" : "T·∫Øt"}
                          </Badge>
                        </TableCell>
                        <TableCell>{s.questions.length}</TableCell>
                        <TableCell>{new Date(s.createdAt).toLocaleDateString("vi-VN")}</TableCell>
                        <TableCell className="space-x-2">
                          <Button size="sm" variant="outline" onClick={() => openSurveyEditor(s)}>
                            <Edit className="h-4 w-4 mr-1" /> S·ª≠a
                          </Button>
                          <Button size="sm" variant="outline" onClick={() => setSurveys((prev) => prev.map((x) => (x.id === s.id ? { ...x, isActive: !x.isActive } : x)))}>
                            {s.isActive ? <XCircle className="h-4 w-4 mr-1" /> : <CheckCircle className="h-4 w-4 mr-1" />}
                            {s.isActive ? "T·∫Øt" : "B·∫≠t"}
                          </Button>
                          <Button size="sm" variant="outline" onClick={() => simulateSubmitResponse(s)}>G·ª≠i th·ª≠</Button>
                          <Button size="sm" variant="outline" className="text-red-600" onClick={() => deleteSurvey(s.id)}>
                            <Trash2 className="h-4 w-4 mr-1" /> X√≥a
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>

                <Dialog open={surveyEditorOpen} onOpenChange={(o) => setSurveyEditorOpen(o)}>
                  <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
                    <DialogHeader>
                      <DialogTitle>{editingSurveyId ? "Ch·ªânh s·ª≠a" : "T·∫°o"} kh·∫£o s√°t</DialogTitle>
                      <DialogDescription>BR-U7.2-1: Kh·∫£o s√°t ng·∫Øn g·ªçn (‚â§ 5 c√¢u h·ªèi). BR-U7.2-2: ·∫®n danh khi ph√¢n t√≠ch.</DialogDescription>
                    </DialogHeader>

                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <Label>Ti√™u ƒë·ªÅ</Label>
                          <Input value={surveyDraft.title} onChange={(e) => setSurveyDraft({ ...surveyDraft, title: e.target.value })} />
                        </div>
                        <div className="flex items-end justify-end gap-3">
                          <div className="flex items-center gap-2">
                            <Switch checked={surveyDraft.isActive} onCheckedChange={(v) => setSurveyDraft({ ...surveyDraft, isActive: v })} />
                            <span className="text-sm">K√≠ch ho·∫°t</span>
                          </div>
                        </div>
                      </div>
                      <div>
                        <Label>M√¥ t·∫£</Label>
                        <Input value={surveyDraft.description} onChange={(e) => setSurveyDraft({ ...surveyDraft, description: e.target.value })} />
                      </div>

                      <div className="flex items-center justify-between">
                        <Label className="text-base">C√¢u h·ªèi</Label>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            if (surveyDraft.questions.length >= 5) return alert("T·ªëi ƒëa 5 c√¢u h·ªèi");
                            const id = `q${Math.random().toString(36).slice(2, 8)}`;
                            setSurveyDraft({
                              ...surveyDraft,
                              questions: [
                                ...surveyDraft.questions,
                                { id, type: "likert", text: "C√¢u h·ªèi m·ªõi", min: 1, max: 5, required: true },
                              ],
                            });
                          }}
                        >
                          <Plus className="h-4 w-4 mr-1" /> Th√™m c√¢u h·ªèi
                        </Button>
                      </div>

                      <div className="space-y-3">
                        {surveyDraft.questions.map((q, idx) => (
                          <div key={q.id} className="p-3 border rounded-lg">
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-3 items-center">
                              <div className="md:col-span-6">
                                <Label className="text-xs">N·ªôi dung</Label>
                                <Input value={q.text} onChange={(e) => setSurveyDraft({ ...surveyDraft, questions: surveyDraft.questions.map((x) => (x.id === q.id ? { ...x, text: e.target.value } : x)) })} />
                              </div>
                              <div className="md:col-span-3">
                                <Label className="text-xs">Lo·∫°i</Label>
                                <Select value={q.type} onValueChange={(v) => setSurveyDraft({ ...surveyDraft, questions: surveyDraft.questions.map((x) => (x.id === q.id ? { ...x, type: v as any } : x)) })}>
                                  <SelectTrigger>
                                    <SelectValue />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="likert">Thang ƒëi·ªÉm</SelectItem>
                                    <SelectItem value="text">VƒÉn b·∫£n</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              <div className="md:col-span-2 flex items-center gap-2">
                                <Switch checked={!!q.required} onCheckedChange={(v) => setSurveyDraft({ ...surveyDraft, questions: surveyDraft.questions.map((x) => (x.id === q.id ? { ...x, required: v } : x)) })} />
                                <span className="text-xs">B·∫Øt bu·ªôc</span>
                              </div>
                              <div className="md:col-span-1">
                                <Button variant="outline" size="sm" className="text-red-600" onClick={() => setSurveyDraft({ ...surveyDraft, questions: surveyDraft.questions.filter((x) => x.id !== q.id) })}>
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                            {q.type === "likert" && (
                              <div className="grid grid-cols-2 gap-3 mt-3">
                                <div>
                                  <Label className="text-xs">Min</Label>
                                  <Input type="number" value={q.min ?? 1} onChange={(e) => setSurveyDraft({ ...surveyDraft, questions: surveyDraft.questions.map((x) => (x.id === q.id ? { ...x, min: parseInt(e.target.value) } : x)) })} />
                                </div>
                                <div>
                                  <Label className="text-xs">Max</Label>
                                  <Input type="number" value={q.max ?? 5} onChange={(e) => setSurveyDraft({ ...surveyDraft, questions: surveyDraft.questions.map((x) => (x.id === q.id ? { ...x, max: parseInt(e.target.value) } : x)) })} />
                                </div>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>

                      <div className="flex justify-end gap-2">
                        <Button variant="outline" onClick={() => setSurveyEditorOpen(false)}>H·ªßy</Button>
                        <Button onClick={saveSurveyDraft} className="bg-sky-600 hover:bg-sky-700">L∆∞u kh·∫£o s√°t</Button>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>

                {/* Simple responses list */}
                <div className="mt-6">
                  <h3 className="font-medium mb-2">Ph·∫£n h·ªìi g·∫ßn ƒë√¢y</h3>
                  {surveyResponses.length === 0 ? (
                    <div className="text-sm text-gray-500">Ch∆∞a c√≥ ph·∫£n h·ªìi. D√πng n√∫t "G·ª≠i th·ª≠" ƒë·ªÉ m√¥ ph·ªèng.</div>
                  ) : (
                    <div className="space-y-2 max-h-64 overflow-y-auto">
                      {surveyResponses.map((r) => (
                        <div key={r.id} className="p-3 border rounded bg-gray-50 text-sm">
                          <div className="flex justify-between">
                            <div>M√£ ph·∫£n h·ªìi: {r.id} ‚Ä¢ Kh·∫£o s√°t #{r.surveyId}</div>
                            <div className="opacity-60">{new Date(r.createdAt).toLocaleString("vi-VN")}</div>
                          </div>
                          <div className="opacity-70">Ng∆∞·ªùi d√πng: {r.anonymizedUser}</div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Logs Tab */}
          <TabsContent value="logs">
            <Card className="border-orange-200">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2 text-orange-700">
                    <Activity className="h-5 w-5" />
                    Theo d√µi Log AI - T·∫•t c·∫£ ho·∫°t ƒë·ªông AI
                  </CardTitle>
                  <Button onClick={exportLogs} variant="outline">
                    <Download className="h-4 w-4 mr-2" />
                    Xu·∫•t CSV
                  </Button>
                </div>
                <div className="flex items-center gap-4 mt-4">
                  <div className="flex items-center gap-2">
                    <Label>L·ªçc theo Module:</Label>
                    <Select value={moduleFilter} onValueChange={setModuleFilter}>
                      <SelectTrigger className="w-40">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="T·∫•t c·∫£">T·∫•t c·∫£</SelectItem>
                        <SelectItem value="B√†i t·∫≠p">B√†i t·∫≠p</SelectItem>
                        <SelectItem value="L·ªô tr√¨nh">L·ªô tr√¨nh</SelectItem>
                        <SelectItem value="Chatbot">Chatbot</SelectItem>
                        <SelectItem value="Ch·∫•m b√†i">Ch·∫•m b√†i</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="flex items-center gap-2">
                    <Label>L·ªçc theo Tr·∫°ng th√°i:</Label>
                    <Select value={statusFilter} onValueChange={setStatusFilter}>
                      <SelectTrigger className="w-40">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="T·∫•t c·∫£">T·∫•t c·∫£</SelectItem>
                        <SelectItem value="Th√†nh c√¥ng">Th√†nh c√¥ng</SelectItem>
                        <SelectItem value="L·ªói">L·ªói</SelectItem>
                        <SelectItem value="ƒêang x·ª≠ l√Ω">ƒêang x·ª≠ l√Ω</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Th·ªùi gian</TableHead>
                      <TableHead>Ng∆∞·ªùi d√πng</TableHead>
                      <TableHead>Module</TableHead>
                      <TableHead>N·ªôi dung</TableHead>
                      <TableHead>Token</TableHead>
                      <TableHead>Tr·∫°ng th√°i & H√†nh ƒë·ªông</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {mockAILogs
                      .filter((log) => moduleFilter === "T·∫•t c·∫£" || log.module === moduleFilter)
                      .filter((log) => statusFilter === "T·∫•t c·∫£" || log.status === statusFilter)
                      .map((log) => (
                        <TableRow key={log.id}>
                          <TableCell className="font-mono text-sm">{log.timestamp}</TableCell>
                          <TableCell>{log.user}</TableCell>
                          <TableCell>
                            <Badge className={getModuleColor(log.module)}>{log.module}</Badge>
                          </TableCell>
                          <TableCell>
                            <div className="max-w-xs">
                              <p className="text-sm text-gray-700 truncate" title={log.details}>
                                {log.details || "Kh√¥ng c√≥ m√¥ t·∫£"}
                              </p>
                              {log.conversation && (
                                <Badge variant="outline" className="mt-1 text-xs">üí¨ {log.conversation.length} tin nh·∫Øn</Badge>
                              )}
                            </div>
                          </TableCell>
                          <TableCell className="font-mono text-blue-600">{log.tokensUsed}</TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Badge className={getStatusColor(log.status)}>{log.status}</Badge>
                              <Button variant="ghost" size="sm" onClick={() => showLogDetail(log)} className="text-blue-600 hover:text-blue-800">
                                {log.conversation ? "üí¨ Xem h·ªôi tho·∫°i" : "üîç Xem chi ti·∫øt"}
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                  </TableBody>
                </Table>

                <div className="mt-6 grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                    <div className="text-2xl font-bold text-blue-600">1,245</div>
                    <div className="text-sm text-blue-600">T·ªïng request h√¥m nay</div>
                  </div>
                  <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                    <div className="text-2xl font-bold text-green-600">98.5%</div>
                    <div className="text-sm text-green-600">T·ªâ l·ªá th√†nh c√¥ng</div>
                  </div>
                  <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
                    <div className="text-2xl font-bold text-orange-600">45,678</div>
                    <div className="text-sm text-orange-600">Token s·ª≠ d·ª•ng</div>
                  </div>
                  <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                    <div className="text-2xl font-bold text-purple-600">45,678</div>
                    <div className="text-sm text-purple-600">Token h√¥m nay</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Log Detail Dialog */}
        <Dialog open={isLogDetailDialogOpen} onOpenChange={setIsLogDetailDialogOpen}>
          <DialogContent className="max-w-2xl max-h-[80vh] overflow-hidden">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">üìä Chi ti·∫øt ho·∫°t ƒë·ªông AI</DialogTitle>
              <DialogDescription>Th√¥ng tin chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông AI v√† cu·ªôc h·ªôi tho·∫°i</DialogDescription>
            </DialogHeader>

            {selectedLog && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-medium text-gray-600">üï∞Ô∏è Th·ªùi gian:</span>
                      <span className="text-sm font-mono">{selectedLog.timestamp}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-medium text-gray-600">üë§ Ng∆∞·ªùi d√πng:</span>
                      <span className="text-sm">{selectedLog.user}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-medium text-gray-600">üíª Module:</span>
                      <Badge className={getModuleColor(selectedLog.module)}>{selectedLog.module}</Badge>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-medium text-gray-600">üé© Token ti√™u th·ª•:</span>
                      <span className="text-sm font-mono text-blue-600">{selectedLog.tokensUsed}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-medium text-gray-600">üéÜ H·ªá th·ªëng:</span>
                      <span className="text-sm text-green-600">Free (Kh√¥ng t√≠nh ph√≠)</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-medium text-gray-600">‚úÖ Tr·∫°ng th√°i:</span>
                      <Badge className={getStatusColor(selectedLog.status)}>{selectedLog.status}</Badge>
                    </div>
                  </div>
                </div>

                <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <h4 className="font-medium text-blue-800 mb-2">üìù M√¥ t·∫£:</h4>
                  <p className="text-sm text-blue-700">{selectedLog.details || "Kh√¥ng c√≥ m√¥ t·∫£"}</p>
                </div>

                {selectedLog.conversation && selectedLog.conversation.length > 0 && (
                  <div className="space-y-3">
                    <h4 className="font-medium text-gray-800 flex items-center gap-2">üí¨ Cu·ªôc h·ªôi tho·∫°i ({selectedLog.conversation.length} tin nh·∫Øn):</h4>
                    <div className="max-h-64 overflow-y-auto space-y-3 p-4 bg-gray-50 rounded-lg border">
                      {selectedLog.conversation.map((msg: any, index: number) => (
                        <div key={index} className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"}`}>
                          <div className={`max-w-[80%] p-3 rounded-lg ${msg.role === "user" ? "bg-blue-500 text-white" : "bg-white border border-gray-200"}`}>
                            <div className="flex items-center gap-2 mb-1">
                              <span className="text-xs font-medium">{msg.role === "user" ? "üë§ H·ªçc sinh" : "ü§ñ AI Assistant"}</span>
                              <span className="text-xs opacity-70">{msg.time}</span>
                            </div>
                            <p className="text-sm whitespace-pre-wrap">{msg.content}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            <DialogFooter>
              <Button variant="outline" onClick={() => setIsLogDetailDialogOpen(false)}>ƒê√≥ng</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </AdminLayout>
  );
}
